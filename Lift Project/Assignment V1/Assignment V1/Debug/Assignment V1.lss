
AVRASM ver. 2.2.7  C:\Users\andre\OneDrive - UNSW\University\COMP2121- CURRENT\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm Sat Apr 27 11:00:17 2019

[builtin](2): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\andre\OneDrive - UNSW\University\COMP2121- CURRENT\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm(18): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\andre\OneDrive - UNSW\University\COMP2121- CURRENT\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm(100): warning: Register r28 already defined by the .DEF directive
C:\Users\andre\OneDrive - UNSW\University\COMP2121- CURRENT\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm(101): warning: Register r29 already defined by the .DEF directive
[builtin](2): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\andre\OneDrive - UNSW\University\COMP2121- CURRENT\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm(18): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Assignment V1.asm
                                 ;
                                 ; Created: 31/03/2019 9:58:14 AM
                                 ; Author : andrew fleming z5164462 anirudh ramia z5164466
                                 ;
                                 
                                 /*Assumptions !!!!
                                 
                                 The Emergency call cannot be cancelled until the lift reaches the first floor
                                 and has completed the opening and closing routinues
                                 */
                                 
                                 
                                 ; Replace with your application code
                                 
                                 ;initial definitions and assignments
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .dseg
                                 Queue_len:
000200                               .byte 1
                                 Queue:
000201                           	.byte 10
                                 Count:
00020b                               .byte 2
                                 Seconds:
00020d                               .byte 2
                                 Debounce1:
00020f                               .byte 1
                                 Debounce2:
000210                               .byte 1
                                 Wait_duration:
000211                               .byte 2
                                 Flash_wait:
000213                               .byte 2
                                 
                                 /*
                                 input_array?
                                 floor_array?
                                 */
                                 
                                 //REGISTER_DEFINITIONS
                                 .cseg
                                 
                                 
                                 .def zero = r3
                                 .def one = r4
                                 .def counter = r7
                                 .def ret1 = r10
                                 .def ret2 = r11
                                 .def current_floor = r16
                                 .def requested_floor = r17
                                 .def input_value = r18
                                 .def lift_status = r19
                                 .def temp1 = r20
                                 .def temp2 = r21 //NOTE: temp1 and temp2 will not reliably hold the data given to them
                                 .def arg1 = r22
                                 .def arg2 = r23
                                 
                                 
                                 /*
                                 lift_status is a status register with the bits as flags
                                 b0 = Stopped?
                                 b1 = Going up?
                                 b2 = Doors Open?
                                 b3 = Doors Opening?
                                 b4 = Doors Closing?
                                 b5 = Flash on?
                                 b6 = Emergency?
                                 b7 = Halted?
                                 */
                                 .equ stopped =   		0b00000001    // is floor stopped?
                                 .equ goingUp =   		0b00000010    // is lift going up?
                                 .equ doorsOpen =		0b00000100    // are the doors open?
                                 .equ opening =   		0b00001000    // are the doors opening?
                                 .equ closing =   		0b00010000    // are the doors closing? if no to open, opening and closing, they closed
                                 .equ flashing =   		0b00100000  // is the LED bar flashing
                                 .equ emergency =		0b01000000    // is there an emergency
                                 .equ halted =   		0b10000000    // is the lift stopped
                                 
                                 //LCD interface constants
                                 .equ PORTLDIR = 0xF0   		 ; 0xF0 = 0b11110000 -> Setting PORTA 7:4 as output and 3:0 as input
                                 .equ INITCOLMASK = 0XEF   		 ; 0xEF = 0b11101111 -> Mask to decide which column is selected
                                 .equ INITROWMASK = 0x01   		 ; 0x01 = 0b00000001 -> Mask to check which row is selected
                                 .equ ROWMASK = 0x0F   			 ; 0x0F = 0b00001111 -> To get keyboard output value using an AND operation
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 .equ l_one = 0b10000000
                                 .equ l_two = 0b11000000
                                 
                                 //clock and flash constants
                                 
                                 .equ clock_speed = 781
                                 .equ wait_speed = 1
                                 
                                 
                                 .def wait_durationL = r28    ;YL
                                 .def wait_durationH = r29    ;YH
                                 
                                 
                                 //Flag checking register  usage check_register_bit stopped
                                 //   							 breq action
                                 .macro check_register_bit
                                 	push temp1
                                     mov temp1, lift_status
                                     andi temp1, @0
                                     cpi temp1, @0
                                 	pop temp1
                                 .endmacro
                                 
                                 //Clear word macro
                                 .macro clear
                                     sts @0, zero
                                     sts @0+1, zero
                                 .endmacro
                                 
                                 //LCD MACROS
                                 .macro do_lcd_command   					 // LCD commands
                                     ldi temp1, @0
                                     rcall lcd_command
                                     rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_command_reg   				 // LCD commands, with registers
                                     mov temp1, @0
                                     rcall lcd_command
                                     rcall lcd_wait
                                 .endmacro
                                 
                                 .macro change_line   						 // change line and cursor position on line
                                 	push temp1
                                 	push temp2
                                     ldi temp1, @0
                                     cpi temp1, 2
                                     breq line_two
                                     ldi temp2, l_one
                                     ori temp2, @1
                                     do_lcd_command_reg temp2
                                     jmp end_cl
                                 line_two:
                                     ldi temp2, l_two
                                     ori temp2, @1
                                     do_lcd_command_reg temp2
                                 end_cl:
                                 	pop temp2
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro write   							 // write immediate data to LCD screen
                                     push temp1
                                 	ldi temp1, @0
                                     rcall lcd_data
                                     rcall lcd_wait
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro write_reg   						 // write register data to LCD screen
                                     push temp1
                                 	mov temp1, @0
                                     rcall lcd_data
                                     rcall lcd_wait
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro clear_disp   						 // clear the LCD Display
                                     do_lcd_command 0b00000001
                                 .endmacro
                                 
                                 .macro lcd_set   							 // set bit in PORTA
                                     sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr   							 // clear bit in PORTA
                                     cbi PORTA, @0
                                 .endmacro
                                 .macro set_motor_speed
                                 	push temp1
                                 	ldi temp1, @0
                                 	sts OCR3BL, temp1
                                 	clr temp1
                                 	sts OCR3BH, temp1	
                                 	pop temp1
                                 .endmacro
                                 
                                 
                                 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
                                 // INTERRUPTS
                                 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
                                 
                                 //-----------------------------
                                 // |  C3   |  C2   |  C1   |  C0   |  R3   |  R2   |  R1   |  R0   |
                                 // |  PL0  |  PL1  |  PL2  |  PL3  |  PL4  |  PL5  |  PL6  |  PL7  |
                                 
                                 
                                 .org 0x0000 ; reset adress
000000 940c 0032                     jmp RESET
                                 
                                 .org INT0addr
000002 940c 012a                     jmp EXT_INT0
                                 .org INT1addr
000004 940c 0147                     jmp EXT_INT1
                                 
                                 .org OVF0addr
00002e 940c 0160                     jmp Timer0OVF
                                 
                                 
                                 //CSEG MEMORY STORAGE
                                 
                                 /*requests:
                                    	 .db 3,2,6*/
                                 divisors:
000030 000a
000031 0001                      	 .dw  10, 1
                                 
                                 RESET:
000032 ef4f                          ldi temp1, low(RAMEND)    ; Init stack frame
000033 bf4d                          out SPL, temp1
000034 e241                          ldi temp1, high(RAMEND)
000035 bf4e                          out SPH, temp1
                                 
                                 
000036 7f3e                      	cbr lift_status, stopped	;0
000037 6032                      	sbr lift_status, goingUp	;1
000038 7f3b                      	cbr lift_status, doorsOpen	;0
000039 7f37                      	cbr lift_status, opening	;0
00003a 7e3f                      	cbr lift_status, closing	;0
00003b 7d3f                      	cbr lift_status, flashing	;0
00003c 7b3f                      	cbr lift_status, emergency	;0
00003d 773f                      	cbr lift_status, halted		;0
                                 
00003e e001                      	ldi current_floor, 1
                                 	
                                 
00003f 2433                          clr zero   			 ; zero
000040 2444                          clr one   				 
000041 9443                          inc one   				 ; one
000042 24aa                      	clr ret1
000043 24bb                      	clr ret2
                                 
000044 9230 0200                 	sts Queue_len, zero
                                 
000046 ef40                          ldi temp1, PORTLDIR   	 ;p7-4 outputs, p3-0 inputs
000047 e05f                      	ldi temp2, 0b00001111;send 1 to p3-0 to activate pull up resistors
000048 9340 010a                     sts DDRL, temp1
00004a 9340 010b                 	sts PORTL, temp1
                                 
00004c 0000                      	nop
                                  			 
                                 
00004d ef4f                      	ser temp1
00004e b947                          out DDRC, temp1   		 ;LED Lower
00004f bb43                          out DDRG, temp1   		 ;LED Higher
000050 2744                      	clr temp1
000051 b94a                          out DDRD, temp1   		 ;Buttons?
                                 /*    ldi temp1, 0b01010101    ;LED testing
                                     ldi temp2, 0
                                     out PORTC, temp1   	 ;LED lower
                                     out PORTG, temp2   	 ;LED higher*/
                                 
000052 e140                      	ldi temp1, 0b00010000
000053 b94d                      	out DDRE, temp1
                                 
000054 e24a                          ldi temp1, 0b00101010    ;falling edges for interrupts 2, 1 and 0
000055 9340 0069                     sts EICRA, temp1   	 
                                 
                                 
                                 
000057 b34d                          in temp1, EIMSK
000058 6041                      	ori temp1, (1<<INT0)
000059 6042                      	ori temp1, (1<<INT1)
00005a 6044                          ori temp1, (1<<INT2)
00005b bb4d                          out EIMSK, temp1
                                     
00005c e040                          ldi temp1, 0b00000000
00005d bd44                          out TCCR0A, temp1
00005e e042                          ldi temp1, 0b00000010
00005f bd45                          out TCCR0B, temp1
000060 e041                          ldi temp1, 1<<TOIE0
000061 9340 006e                     sts TIMSK0, temp1
                                 
000063 e041                      	ldi temp1, (1<<CS30)
000064 9340 0091                 	sts TCCR3B, temp1
000066 e241                      	ldi temp1, (1<<COM3B1) | (1<<WGM30)
000067 9340 0090                 	sts TCCR3A, temp1
                                 	
                                 //from LCD-example LCD setup
000069 ef4f                          ser temp1
                                 
00006a bb40                          out DDRF, temp1
00006b b941                          out DDRA, temp1
                                 
00006c 2744                          clr temp1
00006d bb41                          out PORTF, temp1
00006e b942                          out PORTA, temp1
                                 
                                 	
00006f b848                      out PORTC, one
000070 e348
000071 d1f2
000072 d201                          do_lcd_command 0b00111000 ; 2x5x7
                                 
000073 d21a                          rcall sleep_5ms
000074 e348
000075 d1ee
000076 d1fd                          do_lcd_command 0b00111000 ; 2x5x7
000077 d20d                      	rcall sleep_1ms
000078 e348
000079 d1ea
00007a d1f9                          do_lcd_command 0b00111000 ; 2x5x7
00007b e348
00007c d1e7
00007d d1f6                          do_lcd_command 0b00111000 ; 2x5x7
00007e e048
00007f d1e4
000080 d1f3                          do_lcd_command 0b00001000 ; display off?
000081 e041
000082 d1e1
000083 d1f0                          do_lcd_command 0b00000001 ; clear display
000084 e046
000085 d1de
000086 d1ed                          do_lcd_command 0b00000110 ; increment, no display shift
000087 e04e
000088 d1db
000089 d1ea                          do_lcd_command 0b00001110 ; Cursor on, bar, no blink
                                 
00008a e041
00008b d1d8
00008c d1e7                      	clear_disp
00008d 934f
00008e e443
00008f d1db
000090 d1e3
000091 914f                      	write 'C'
000092 934f
000093 e745
000094 d1d6
000095 d1de
000096 914f                      	write 'u'
000097 934f
000098 e742
000099 d1d1
00009a d1d9
00009b 914f                      	write 'r'
00009c 934f
00009d e742
00009e d1cc
00009f d1d4
0000a0 914f                      	write 'r'
0000a1 934f
0000a2 e645
0000a3 d1c7
0000a4 d1cf
0000a5 914f                      	write 'e'
0000a6 934f
0000a7 e64e
0000a8 d1c2
0000a9 d1ca
0000aa 914f                      	write 'n'
0000ab 934f
0000ac e744
0000ad d1bd
0000ae d1c5
0000af 914f                      	write 't'
0000b0 934f
0000b1 e240
0000b2 d1b8
0000b3 d1c0
0000b4 914f                      	write ' '
0000b5 934f
0000b6 e646
0000b7 d1b3
0000b8 d1bb
0000b9 914f                      	write 'f'
0000ba 934f
0000bb e64c
0000bc d1ae
0000bd d1b6
0000be 914f                      	write 'l'
0000bf 934f
0000c0 e64f
0000c1 d1a9
0000c2 d1b1
0000c3 914f                      	write 'o'
0000c4 934f
0000c5 e64f
0000c6 d1a4
0000c7 d1ac
0000c8 914f                      	write 'o'
0000c9 934f
0000ca e742
0000cb d19f
0000cc d1a7
0000cd 914f                      	write 'r'
                                 
0000ce 934f
0000cf 935f
0000d0 e042
0000d1 3042
0000d2 f039
0000d3 e850
0000d4 6050
0000d5 2f45
0000d6 d18d
0000d7 d19c
0000d8 940c 00df
0000da ec50
0000db 6050
0000dc 2f45
0000dd d186
0000de d195
0000df 915f
0000e0 914f                      	change_line 2, 0
                                 	
0000e1 934f
0000e2 e44e
0000e3 d187
0000e4 d18f
0000e5 914f                      	write 'N'
0000e6 934f
0000e7 e645
0000e8 d182
0000e9 d18a
0000ea 914f                      	write 'e'
0000eb 934f
0000ec e748
0000ed d17d
0000ee d185
0000ef 914f                      	write 'x'
0000f0 934f
0000f1 e744
0000f2 d178
0000f3 d180
0000f4 914f                      	write 't'
0000f5 934f
0000f6 e240
0000f7 d173
0000f8 d17b
0000f9 914f                      	write ' '
0000fa 934f
0000fb e743
0000fc d16e
0000fd d176
0000fe 914f                      	write 's'
0000ff 934f
000100 e744
000101 d169
000102 d171
000103 914f                      	write 't'
000104 934f
000105 e64f
000106 d164
000107 d16c
000108 914f                      	write 'o'
000109 934f
00010a e740
00010b d15f
00010c d167
00010d 914f                      	write 'p'
                                 
00010e 934f
00010f 935f
000110 e042
000111 3042
000112 f039
000113 e850
000114 605d
000115 2f45
000116 d14d
000117 d15c
000118 940c 011f
00011a ec50
00011b 605d
00011c 2f45
00011d d146
00011e d155
00011f 915f
000120 914f                      	change_line 2, 13
000121 934f
000122 e541
000123 d147
000124 d14f
000125 914f                      	write 'Q'
                                 
000126 d1eb                      	rcall show_floor
000127 9478                          sei
000128 940c 0186                     jmp main
                                 
                                 
                                 
                                 
                                 EXT_INT0:
                                 
                                     
00012a 934f
00012b 2f43
00012c 7041
00012d 3041
00012e 914f                          check_register_bit stopped  //if not stopped, ignore close door
00012f f499                          brne INT0_END
                                 
000130 934f
000131 2f43
000132 7048
000133 3048
000134 914f                          check_register_bit opening //if doors opening, ignore close door
000135 f069                          breq INT0_END
                                 
                                 //in theory, we should be able to test: check_register_bit, doorsOpen / brne INT0_END
                                 
000136 9150 020f                     lds temp2, Debounce1
000138 3050                          cpi temp2, 0
000139 f449                          brne INT0_END
                                 
00013a e654                          ldi temp2, 100   		 //set debounce counter to 100
00013b 9350 020f                     sts Debounce1, temp2
                                     
                                     
00013d 27cc                          clr wait_durationL   				 //set the wait duration to 0
00013e 27dd                          clr wait_durationH
00013f 93c0 0211                     sts Wait_duration, wait_durationL
000141 93d0 0212                     sts Wait_duration+1, wait_durationH
                                 
                                 
                                 
                                 
                                 INT0_END:
000143 915f                          pop temp2
000144 bf5f                          out SREG, temp2
000145 915f                          pop temp2
000146 9518                          reti
                                 
                                 
                                 
                                 EXT_INT1:
000147 935f                          push temp2
000148 b75f                          in temp2, SREG
000149 935f                          push temp2
                                     
00014a 934f
00014b 2f43
00014c 7041
00014d 3041
00014e 914f                          check_register_bit stopped
00014f f461                          brne INT1_END
                                 
000150 9150 0210                     lds temp2, Debounce2
000152 3050                          cpi temp2, 0
000153 f441                          brne INT1_END
                                 
000154 e654                          ldi temp2, 100
000155 9350 0210                     sts Debounce2, temp2
                                 
000157 966e                          adiw wait_durationH:wait_durationL, 30 //not as simple as this, if closing, stopp closing, if held while waiting, extend until not pressed.
000158 93c0 0211                     sts Wait_duration, wait_durationL
00015a 93d0 0212                     sts Wait_duration+1, wait_durationH
                                 
                                 INT1_END:
00015c 915f                          pop temp2
00015d bf5f                          out SREG, temp2
00015e 915f                          pop temp2
00015f 9518                          reti
                                 
                                 Timer0OVF:
000160 934f                      	push temp1
000161 b74f                          in temp1, SREG   	 ; stack frame for timer interrupt handler
000162 934f                          push temp1
000163 939f                          push r25
000164 938f                          push r24
                                 
000165 9180 020b                     lds r24, Count   	 ; increment count
000167 9190 020c                     lds r25, Count + 1
000169 9601                          adiw r25:r24, 1
                                     
00016a 308d                          cpi r24, low(clock_speed)    ; compare with clock speed to check if 1/10 of second has passed
00016b e043                          ldi temp1, high(clock_speed)
00016c 0794                          cpc r25, temp1
00016d f471                          brne Not_second
00016e 9180 020d                     lds r24, Seconds   		 ; increment seconds every 1/10 of second
000170 9190 020e                     lds r25, Seconds+1
                                 
                                 
                                 /*    lds temp1, Debounce1   	 ; decrement Debounce counter for INT0
                                     dec temp1
                                     sts Debounce1, temp1
                                 
                                     lds temp1, Debounce2   	 ; decrement Debounce counter for INT1
                                     dec temp1
                                     sts Debounce2, temp1*/
                                 
000172 9601                          adiw r25:r24, 1
000173 9380 020d                     sts Seconds, r24
000175 9390 020e                     sts Seconds+1, r25
000177 9230 020b
000179 9230 020c                     clear Count
00017b c004                          rjmp End_I
                                 
                                 Not_second:
00017c 9380 020b                     sts Count, r24
00017e 9390 020c                     sts Count+1, r25
                                 
                                 End_I:
                                 ; Epilogue
000180 919f                          pop r25
000181 918f                          pop r24
000182 914f                          pop temp1
000183 bf4f                          out SREG, temp1
000184 914f                      	pop temp1
000185 9518                          reti
                                 
                                 // Function to insert input floor into list
                                 // parameters Address of queue (X), input_floor (arg1), current_floor (global), direction (b1 of r20, global)
                                 // will set requested_floor (global), direction (b1 of r20, global)
                                 
                                 
                                 
                                 
                                 //MAIN:
                                 main:
                                 /*	lds r24, Seconds   		 ; increment seconds every 1/10 of second
                                     lds r25, Seconds+1		 ;FOR DEBUGGING ONLY
                                     adiw r25:r24, 5
                                     sts Seconds, r24
                                     sts Seconds+1, r25*/
                                 // ---------------------------------------- SCANNING THE KEYPAD \/
                                 
000186 934f
000187 935f
000188 e041
000189 3042
00018a f039
00018b e850
00018c 605e
00018d 2f45
00018e d0d5
00018f d0e4
000190 940c 0197
000192 ec50
000193 605e
000194 2f45
000195 d0ce
000196 d0dd
000197 915f
000198 914f                      	change_line 1, 14
000199 2f60                      	mov arg1, current_floor
00019a d18f                      	rcall convert_to_ascii
00019b 934f
00019c 935f
00019d e042
00019e 3042
00019f f039
0001a0 e850
0001a1 605a
0001a2 2f45
0001a3 d0c0
0001a4 d0cf
0001a5 940c 01ac
0001a7 ec50
0001a8 605a
0001a9 2f45
0001aa d0b9
0001ab d0c8
0001ac 915f
0001ad 914f                      	change_line 2, 10
0001ae 2f61                      	mov arg1, requested_floor
0001af d17a                      	rcall convert_to_ascii
0001b0 934f
0001b1 935f
0001b2 e042
0001b3 3042
0001b4 f039
0001b5 e850
0001b6 605f
0001b7 2f45
0001b8 d0ab
0001b9 d0ba
0001ba 940c 01c1
0001bc ec50
0001bd 605f
0001be 2f45
0001bf d0a4
0001c0 d0b3
0001c1 915f
0001c2 914f                      	change_line 2, 15
0001c3 9160 0200                 	lds arg1, Queue_len
0001c5 d164                      	rcall convert_to_ascii
                                 	//display current_floor and requested_floor on LCD
                                 	//requested floor = 0 in Reset (TODO)
                                 
0001c6 d1cf                      	rcall scan				//reading the queue
                                 /*	mov arg1, ret1 
                                 	rcall convert_to_ascii*/ //DEBUGGING
0001c7 2d2a                      	mov input_value, ret1
                                 
                                 /*	if input_value == *
                                 		emergency func*/
                                 
0001c8 d0d6                      	rcall insert_request
                                 	
                                 // ---------------------------------------- SCANNING THE KEYPAD	/\
                                 
                                 // ---------------------------------------- CHECKING STOPPED \/
                                 
0001c9 934f
0001ca 2f43
0001cb 7041
0001cc 3041
0001cd 914f                      	check_register_bit stopped		//already stopped
0001ce f409                      	brne read_queue
0001cf c02f                      	rjmp stop_here
                                 
                                 // ---------------------------------------- CHECKING STOPPED /\
                                 
                                 // ---------------------------------------- DISPLAYING THE CURRENT FLOOR AND REQUESTED FLOOR \/
                                 read_queue:
                                 
                                 	
                                 // ---------------------------------------- DISPLAYING THE CURRENT FLOOR AND REQUESTED FLOOR /\
                                 
                                 // ---------------------------------------- READING THE QUEUE \/
0001d0 e010                      	ldi requested_floor, 0		//assume queue empty	
0001d1 9140 0200                 	lds temp1, Queue_len		//is the queue empty?
0001d3 3040                      	cpi temp1, 0
0001d4 f039                      	breq to_main
                                 
                                 
0001d5 9110 0201                 	lds requested_floor, Queue
0001d7 1701                      	cp current_floor, requested_floor	//on correct floor?
0001d8 f429                      	brne check_direction
                                 				
0001d9 6031                      	sbr lift_status, stopped			//first detection of requested_floor
0001da 6038                      	sbr lift_status, opening
0001db c023                      	rjmp stop_here
                                 // ---------------------------------------- READING THE QUEUE /\
                                 to_main:
0001dc 940c 0186                 	jmp main
                                 // ---------------------------------------- MOVING BETWEEN FLOORS \/
                                 check_direction:
0001de f00c                      	brlt direction_up
0001df f414                      	brge direction_down
                                 	
                                 direction_up:
0001e0 6032                      	sbr lift_status, goingUp
0001e1 c002                      	rjmp moving
                                 direction_down:
0001e2 7f3d                      	cbr lift_status, goingUp
0001e3 c000                      	rjmp moving
                                 
                                 moving:
0001e4 9180 020d                 	lds r24, Seconds		//2 Seconds passed?
0001e6 9190 020e                 	lds r25, Seconds+1
0001e8 3184                      	cpi r24, 20
0001e9 f394                      	brlt to_main
                                 
0001ea 9230 020d
0001ec 9230 020e                 	clear Seconds
0001ee 934f
0001ef 2f43
0001f0 7042
0001f1 3042
0001f2 914f                      	check_register_bit goingUp
0001f3 f009                      	breq moving_up
0001f4 c005                      	rjmp moving_down
                                 
                                 
                                 moving_up:
0001f5 e04a                      	ldi temp1, 10				//don't increment past 10
0001f6 1304                      	cpse current_floor, temp1
0001f7 9503                      	inc current_floor			//move up a floor
0001f8 d119                      	rcall show_floor
0001f9 cf8c                      	rjmp main
                                 
                                 moving_down:
0001fa e041                      	ldi temp1, 1
0001fb 1304                      	cpse current_floor, temp1
0001fc 950a                      	dec current_floor
0001fd d114                      	rcall show_floor
0001fe cf87                      	rjmp main
                                 // ---------------------------------------- MOVING BETWEEN FLOORS /\
                                 
                                 
                                 // ---------------------------------------- STOPPING AT THE FLOOR \/
                                 stop_here:
0001ff 934f
000200 2f43
000201 7048
000202 3048
000203 914f                      	check_register_bit opening
000204 f069                      	breq opening_sequence
000205 934f
000206 2f43
000207 7044
000208 3044
000209 914f                      	check_register_bit doorsOpen
00020a f0f1                      	breq doors_open_sequence
00020b 934f
00020c 2f43
00020d 7140
00020e 3140
00020f 914f                      	check_register_bit closing
000210 f181                      	breq closing_sequence
000211 c04f                      	rjmp end_main
                                 
                                 opening_sequence:
000212 d0ff                      	rcall show_floor
000213 934f
000214 e24a
000215 9340 009a
000217 2744
000218 9340 009b
00021a 914f                      	set_motor_speed 0x2A
00021b 9180 020d                 	lds r24, Seconds		//1 Second passed?
00021d 9190 020e                 	lds r25, Seconds+1
00021f 308a                      	cpi r24, 10
000220 f40c                      	brge opening_done
000221 cf64                      	rjmp main
                                 opening_done:
000222 9230 020d
000224 9230 020e                 	clear Seconds
000226 7f37                      	cbr lift_status, opening
000227 6034                      	sbr lift_status, doorsOpen
000228 cf5d                      	rjmp main
                                 
                                 doors_open_sequence:
                                 		
000229 934f
00022a e040
00022b 9340 009a
00022d 2744
00022e 9340 009b
000230 914f                      	set_motor_speed 0
000231 9180 020d                 	lds r24, Seconds		//3 seconds passed?
000233 9190 020e                 	lds r25, Seconds+1
000235 2f68                      	mov arg1, r24			//LED_flash needs the time as an argument
000236 d13c                      	rcall LED_flash
000237 318e                      	cpi r24, 30
000238 f40c                      	brge doors_open_done
000239 cf4c                      	rjmp main
                                 doors_open_done:
00023a 9230 020d
00023c 9230 020e                 	clear Seconds
00023e 7f3b                      	cbr lift_status, doorsOpen
00023f 6130                      	sbr lift_status, closing	
000240 cf45                      	rjmp main
                                 
                                 closing_sequence:
000241 d0d0                      	rcall show_floor
000242 934f
000243 e84a
000244 9340 009a
000246 2744
000247 9340 009b
000249 914f                      	set_motor_speed 0x8A
00024a 9180 020d                 	lds r24, Seconds		//1 Second passed?
00024c 9190 020e                 	lds r25, Seconds+1
00024e 308a                      	cpi r24, 10				
00024f f40c                      	brge closing_done
000250 cf35                      	rjmp main
                                 closing_done:
000251 9230 020d
000253 9230 020e                 	clear Seconds
000255 7e3f                      	cbr lift_status, closing
000256 7f3e                      	cbr lift_status, stopped
000257 934f
000258 e040
000259 9340 009a
00025b 2744
00025c 9340 009b
00025e 914f                      	set_motor_speed 0
00025f d179                      	rcall shuffle_queue
000260 cf25                      	rjmp main
                                 // ---------------------------------------- STOPPING AT THE FLOOR /\
                                 
                                 // ---------------------------------------- ERROR HANDLING \/
                                 end_main:
000261 ec4c                      	ldi temp1, 0b11001100
000262 b948                      	out PORTC, temp1
000263 cffd                      	rjmp end_main
                                 // ---------------------------------------- ERROR HANDLING /\
                                 
                                 // ---------------------------------------- EMERGENCY FUNCTION \/
                                 
                                 
                                 
                                 
                                 /*emergency_func:
                                 
                                 	push temp1
                                 	
                                 	in temp1, SREG
                                 	push temp1
                                 	
                                 	lds temp1, Seconds
                                 	push temp1
                                 	
                                 	lds temp1, Seconds+1
                                 	push temp1
                                 	
                                 	push r14
                                 	push current_floor
                                 
                                 	clear_disp
                                 	clear Seconds
                                 	write 'E'
                                 	write 'm'
                                 	write 'e'
                                 	write 'r'
                                 	write 'g'
                                 	write 'e'
                                 	write 'n'
                                 	write 'c'
                                 	write 'y'
                                 	change_line 2, 0
                                 	write 'C'
                                 	write 'a'
                                 	write 'l'
                                 	write 'l'
                                 	write ' '
                                 	write '0'
                                 	write '0'
                                 	write '0'
                                 
                                 	lcd_set 2
                                 
                                 	mov r14, current_floor	   // for restoring original floor
                                 
                                 drop_floor_loop:
                                 	rcall show_floor
                                 	cpi current_floor, 1
                                 	breq drop_floor_end
                                 	lds r24, Seconds
                                 	lds r25, Seconds+1
                                 	mov arg1, r24
                                 	rcall Strobe_flash
                                 	cpi r24, 20
                                 	brlt drop_floor_loop
                                 	dec current_floor
                                 	clear Seconds
                                 	rjmp drop_floor_loop
                                 drop_floor_end:
                                 
                                 emergency_open:*/
                                 
                                 
                                 	
                                 	
                                 
                                 // ---------------------------------------- EMERGENCY FUNCTION /\
                                 
                                 
                                 // ---------------------------------------- LCD_FUNCTIONS \/
                                 lcd_command:
000264 bb41                          out PORTF, temp1
000265 d01f                          rcall sleep_1ms
000266 9a16                          lcd_set LCD_E
000267 d01d                          rcall sleep_1ms
000268 9816                          lcd_clr LCD_E
000269 d01b                          rcall sleep_1ms
00026a 9508                          ret
                                 
                                 lcd_data:
00026b bb41                          out PORTF, temp1
00026c 9a17                          lcd_set LCD_RS
00026d d017                          rcall sleep_1ms
00026e 9a16                          lcd_set LCD_E
00026f d015                          rcall sleep_1ms
000270 9816                          lcd_clr LCD_E
000271 d013                          rcall sleep_1ms
000272 9817                          lcd_clr LCD_RS
000273 9508                          ret
                                 
                                 lcd_wait:
000274 930f                          push r16
000275 2700                          clr r16
000276 bb00                          out DDRF, r16
000277 bb01                          out PORTF, r16
000278 9a15                          lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
000279 d00b                          rcall sleep_1ms
00027a 9a16                          lcd_set LCD_E
00027b d009                          rcall sleep_1ms
00027c b10f                          in r16, PINF
00027d 9816                          lcd_clr LCD_E
00027e fd07                          sbrc r16, 7
00027f cff9                          rjmp lcd_wait_loop
000280 9815                          lcd_clr LCD_RW
000281 ef0f                          ser r16
000282 bb00                          out DDRF, r16
000283 910f                          pop r16
000284 9508                          ret
                                 
                                 .equ F_CPU = 12000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
000285 938f                          push r24
000286 939f                          push r25
000287 e09b                          ldi r25, high(DELAY_1MS)
000288 eb84                          ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
000289 9701                          sbiw r25:r24, 1	 //DEBUGGING
00028a f7f1                          brne delayloop_1ms
00028b 919f                          pop r25
00028c 918f                          pop r24
00028d 9508                          ret
                                 
                                 sleep_5ms:
00028e dff6                          rcall sleep_1ms
00028f dff5                          rcall sleep_1ms
000290 dff4                          rcall sleep_1ms
000291 dff3                          rcall sleep_1ms
000292 dff2                          rcall sleep_1ms
000293 9508                          ret
                                 
                                 pause:
000294 dff9                      	rcall sleep_5ms
000295 dff8                      	rcall sleep_5ms
000296 dff7                      	rcall sleep_5ms
000297 dff6                      	rcall sleep_5ms
000298 dff5                      	rcall sleep_5ms
000299 dff4                      	rcall sleep_5ms
00029a dff3                      	rcall sleep_5ms
00029b dff2                      	rcall sleep_5ms
00029c dff1                      	rcall sleep_5ms
00029d dff0                      	rcall sleep_5ms
00029e 9518                      	reti
                                 
                                 // ---------------------------------------- LCD_FUNCTIONS
                                 
                                 // ---------------------------------------- FUNCTIONS
                                 
                                 
                                 //INSERT_REQUEST
                                 
                                 insert_request:
                                 
                                 //prologue
00029f 935f                      push temp2
0002a0 b75f                      in temp2 , SREG
0002a1 935f                      push temp2
                                 
0002a2 927f                      push counter
0002a3 930f                      push r16
0002a4 931f                      push r17
                                 //r16 current_floor global
                                 //r17 requested_floor return value
                                 
0002a5 932f                      push r18    //parameter input_value
                                 //r19 lift_status global
0002a6 933f                      push r19
0002a7 934f                      push r20    //temp1
0002a8 936f                      push r22
0002a9 936f                      push arg1
0002aa 937f                      push arg2
                                 
0002ab 93af                      push XL
0002ac 93bf                      push XH
                                 
0002ad e0a1                      ldi XL, low(Queue)
0002ae e0b2                      ldi XH, high(Queue)
0002af 9160 0200                 lds r22, Queue_len
                                 
0002b1 24aa                      clr ret1
                                 
0002b2 302b                      cpi input_value, 11
0002b3 f014                      brlt under_11
0002b4 940c 0301                 jmp end_insert_loop
                                 under_11:
0002b6 3021                      cpi input_value, 1
0002b7 f414                      brge valid_insert
0002b8 940c 0301                 jmp end_insert_loop
                                 valid_insert:
                                 
0002ba 2477                      clr counter // counter = 0
0002bb 9160 0200                 lds r22, Queue_len
0002bd 1702                      cp current_floor, input_value //if the current floor is the input floor, break to end
0002be f411                      brne input_continue
0002bf 940c 0301                 jmp end_insert_loop
                                 input_continue:
0002c1 2ea2                      mov ret1, input_value
                                 
                                 
                                 
0002c2 934f
0002c3 2f43
0002c4 7042
0002c5 3042
0002c6 914f                      check_register_bit goingUp    // check the goingUp bit
0002c7 f009                      breq up_search    // if 1, sort up
0002c8 c018                      rjmp down_search 	 //else sort down
                                 
                                 
                                 
                                 //r7 counter r22 len
                                 
                                 up_search:
0002c9 1720                          cp input_value, current_floor   		 ; if input floor < current floor, jump to up_descending_loop, else up_ascending_loop
0002ca f05c                          brlt up_descending_loop
                                 up_ascending_loop:
0002cb 1676                          cp counter, r22   		 ; compare counter to len (check if end of list reached)
0002cc f159                          breq end_search
0002cd 914c                          ld temp1, X   		 ; load floor from output array
0002ce 1724                          cp input_value, temp1   		 ; check if input floor already exists
0002cf f081                          breq jumping_to_end_insert    ; quit if it does
0002d0 f140                          brlo insert_start    ; if input floor lower than ith floor, insert
0002d1 1740                          cp temp1, current_floor   		 ; compare ith floor to current floor
0002d2 f130                          brlo insert_start    ; if ith < current, insert
0002d3 9611                          adiw X, 1   		 ; increment output array
0002d4 9473                          inc counter   			 ; increment counter
0002d5 cff5                          rjmp up_ascending_loop
                                 
                                 up_descending_loop:
0002d6 1676                          cp counter, r22   		 ; compare counter to len (check if end of list reached)
0002d7 f101                          breq end_search   	 
0002d8 914c                          ld temp1, X   		 ; load floor from output array
0002d9 1724                          cp input_value, temp1   		 ; check if input floor already exists
0002da f131                          breq end_insert_loop    ; quit if it does
0002db 1740                          cp temp1, current_floor   		 ; compare ith floor to current floor
0002dc f020                          brlo down_search    ; if input floor < current floor and ith floor < current floor jmp to down search
0002dd 9611                          adiw X, 1   		 ; increment output array
0002de 9473                          inc counter   			 ; increment counter
0002df cff6                          rjmp up_descending_loop
                                 
                                 jumping_to_end_insert:
0002e0 c020                      rjmp end_insert_loop
                                 
                                 down_search:
0002e1 1702                          cp current_floor, input_value   		 ; compare current floor < input floor
0002e2 f05c                          brlt down_ascending_loop
                                 down_descending_loop:
0002e3 1676                          cp counter, r22   		 ; compare counter to len (check if end of list reached)
0002e4 f099                          breq end_search   	 
0002e5 914c                          ld temp1, X   		 ; load floor from output array
0002e6 1742                          cp temp1, input_value   		 ; check if input floor already exists
0002e7 f0c9                          breq end_insert_loop    ; quit if it does
0002e8 f080                          brlo insert_start    ; if current floor < input floor insert here
0002e9 1704                          cp current_floor, temp1   		 ; compare current floor to ith floor
0002ea f070                          brlo insert_start    
0002eb 9611                          adiw X, 1   		 ; increment output array
0002ec 9473                          inc counter   			 ; increment counter
0002ed cff5                          rjmp down_descending_loop
                                 
                                 down_ascending_loop:
0002ee 1676                          cp counter, r22   		 ; compare counter to len (check if end of list reached)
0002ef f041                          breq end_search   	 
0002f0 914c                          ld temp1, X   		 ; load floor from output array
0002f1 1742                          cp temp1, input_value   		 ; check if input floor already exists
0002f2 f071                          breq end_insert_loop    ; quit if it does
0002f3 1704                          cp current_floor, temp1   		 ; compare ith floor to current floor
0002f4 f2a0                          brlo up_search   	 ; if ith floor > current and input floor > current floor, jmp to upsearch
0002f5 9611                          adiw X, 1   		 ; increment output array
0002f6 9473                          inc counter   			 ; increment counter
0002f7 cff6                          rjmp down_ascending_loop
                                 
                                 end_search:
0002f8 c000                          rjmp insert_start
                                 
                                 insert_start:    
0002f9 9563                          inc r22    ;len++   		 ;length of list is now longer
                                 /*	push arg1
                                 	mov arg1, input_value
                                 	rcall convert_to_ascii
                                 	pop arg1*/
                                 
                                 
                                 insert_loop:
0002fa 1567                          cp r22, counter   			 ; comparison of index and list length to check if the end of the list has been reached
0002fb f029                          breq end_insert_loop    
0002fc 914c                          ld temp1, X
0002fd 932d                      	st X+, input_value
0002fe 2f24                          mov input_value, temp1
0002ff 9473                          inc counter
000300 cff9                          rjmp insert_loop
                                 
                                 end_insert_loop:
                                 
                                 
000301 9360 0200                     sts Queue_len, r22   	 ;store new length back in memory
                                 
                                     ;epilogue
000303 91bf                          pop XH
000304 91af                          pop XL
000305 917f                      	pop arg2
000306 916f                      	pop arg1
000307 916f                          pop r22
000308 914f                          pop r20
000309 913f                      	pop r19
00030a 912f                          pop r18
00030b 911f                      	pop r17
00030c 910f                      	pop r16
00030d 907f                          pop counter
00030e 915f                          pop temp2
00030f bf5f                          out SREG, temp2
000310 915f                          pop temp2
000311 9508                          ret
                                 
                                 
                                 //SHOW_FLOOR:
                                 show_floor:
                                 ;prologue
                                 ;    push YL
                                 ;    push YH
                                 
000312 930f                          push current_floor
000313 927f                          push counter
000314 93af                      	push XL
000315 93bf                      	push XH
                                 
000316 2477                          clr counter    
000317 27aa                          clr XL    ; output
000318 27bb                          clr XH
                                 loop:
000319 1670                          cp counter, current_floor
00031a f041                          breq end_show_floor
00031b 0faa                          lsl XL
00031c 95a3                          inc XL
00031d f008                          brcs grtr8
00031e c002                          rjmp end_x
                                 grtr8:
00031f 0fbb                          lsl XH
000320 95b3                          inc XH
                                 end_x:    
000321 9473                          inc counter
000322 cff6                          rjmp loop
                                 
                                 
                                 ;epilogue
                                 end_show_floor:
000323 bbb4                          out PORTG, XH
000324 b9a8                          out PORTC, XL
                                 
000325 91bf                      pop XH
000326 91af                      pop XL
000327 907f                      pop counter
000328 910f                      pop current_floor
                                 
000329 9508                      ret
                                 
                                 
                                 
                                 //CONVERT_TO_ASCII
                                 convert_to_ascii:
                                 	;prologueg
00032a 927f                      	push r7
00032b 928f                      	push r8
00032c 929f                      	push r9
00032d 930f                      	push r16
00032e 931f                      	push r17
00032f 932f                      	push r18
000330 933f                      	push r19
000331 934f                      	push r20
000332 936f                      	push arg1
000333 937f                      	push arg2
000334 938f                      	push r24
000335 939f                      	push r25
000336 93ef                      	push ZL
000337 93ff                      	push ZH
                                 
                                 
                                 
000338 2777                      	clr arg2 ///THIS IS ONLY FOR WHEN NUMBERS LESS THAN 255
                                 
                                 	;change_line 2, 14
                                 start:
000339 e6e0                      	ldi ZL, low(divisors<<1)
00033a e0f0                      	ldi ZH, high(divisors<<1)
00033b e340                      	ldi r20, 0x30		// ascii value for zero
00033c 2488                      	clr r8
00033d 2499                      	clr r9
                                 convert_loop:
00033e e052                      	ldi temp2, 2
00033f 1695                      	cp r9, temp2
000340 f119                      	breq end_convert
000341 c000                      	rjmp divide
                                 
                                 	// r19:r18 hold the dividend (numerator)
                                 divide:
000342 9105                          lpm r16, Z+  //divisor (denominator)
000343 9115                      	lpm r17, Z+ //^^^
000344 e080                      	ldi r24, 0  //quotient
000345 e090                      	ldi r25, 0	//^^^
                                 loop_start:
000346 3000                      	cpi r16, 0  // not dividing by zero
000347 f041                      	breq end_divide
000348 1760                      	cp arg1, r16 //check dividend !< divisor i.e. you can still minus
000349 0771                      	cpc arg2, r17
00034a f020                      	brlo end_loop 
00034b 1b60                      	sub arg1, r16  //dividend = dividend - divisor 
00034c 0b71                      	sbc arg2, r17
00034d 9601                      	adiw r25:r24, 1 //quotient++	
00034e cff7                          rjmp loop_start
                                 end_loop:
00034f 019b                      	movw r19:r18, arg2:arg1
                                 end_divide:
                                 	
                                 	//r23:r22 holds the remainder, r25:r24 holds the quotient
                                 
000350 01b9                      	movw arg2:arg1, r19:r18 //the remainder moves to the dividend to be divided again
000351 9493                      	inc r9
000352 3080                      	cpi r24, 0
                                 	//breq check_zero
000353 2e74                      	mov r7, r20	//r7 holds ASCII val for '0'
000354 0e78                      	add r7, r24 //r7 holds ASCII val for '0' + remainder
                                 
                                 	//st X+, r7 //store ASCII val in next part of data memory
                                 
000355 934f
000356 2d47
000357 df13
000358 df1b
000359 914f                      	write_reg r7
00035a 9483                      	inc r8
00035b cfe2                      	rjmp convert_loop
                                 check_zero:
00035c 1483                      	cp r8, zero
00035d f301                      	breq convert_loop
00035e 934f
00035f e340
000360 df0a
000361 df12
000362 914f                      	write '0'
                                 
000363 cfda                      	rjmp convert_loop
                                 
                                 
                                 
                                 end_convert:
                                 ;epilogue
000364 91ff                      	pop ZH
000365 91ef                      	pop ZL
000366 919f                      	pop r25
000367 918f                      	pop r24
000368 917f                      	pop arg2
000369 916f                      	pop arg1
00036a 914f                      	pop r20
00036b 913f                      	pop r19
00036c 912f                      	pop r18
00036d 911f                      	pop r17
00036e 910f                      	pop r16
00036f 909f                      	pop r9
000370 908f                      	pop r8
000371 907f                      	pop r7
000372 9508                      	ret
                                 
                                 
                                 
                                 //FLASH_LED
                                 /*//inputs current_floor(global), lift_status(global)
                                 
                                 flash_LED:
                                 push temp1
                                 push temp2
                                 lds temp1, Flash_wait   	 //value of second counter when flash is next toggled
                                 lds temp2, Flash_wait+1
                                 
                                 
                                 check_register_bit flashing
                                 breq flashTrue
                                 rjmp flashFalse    
                                 
                                 flashTrue:
                                     rcall show_floor
                                     cbr lift_status, flashing
                                     rjmp end_flash_LED
                                 flashFalse:
                                     push current_floor
                                     dec current_floor
                                     rcall show_floor
                                     pop current_floor
                                     sbr lift_status, flashing
                                 
                                 end_flash_LED:
                                 pop temp2
                                 pop temp1
                                 ret*/
                                 
                                 
                                 LED_flash:	//Reads in the seconds value in arg1
000373 934f                      	push temp1
000374 b74f                      	in temp1, SREG
000375 934f                      	push temp1
000376 930f                      	push current_floor
000377 936f                          push arg1
000378 9567                      	ror arg1 //rotates the time into the carry
000379 f008                          brcs LED_up	//if old LSB was 1, i.e. odd turn strobe on
00037a f410                          brcc LED_down	//if old LSB was 0, i.e even turn strobe off
                                 
                                 LED_up:
00037b df96                          rcall show_floor		//set PORTA bit to 1
00037c c003                      	rjmp LED_end
                                 LED_down:
00037d 950a                          dec current_floor
00037e df93                      	rcall show_floor
00037f c000                      	rjmp LED_end
                                 LED_end:
000380 916f                          pop arg1
000381 910f                      	pop current_floor
000382 914f                      	pop temp1
000383 bf4f                      	out SREG, temp1
000384 914f                      	pop temp1
000385 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 //STROBE_FLASH
                                 Strobe_flash:	//Reads in the seconds value in X
000386 934f                      	push temp1
000387 b74f                      	in temp1, SREG
000388 934f                      	push temp1
000389 936f                      	push arg1
00038a 9567                          ror arg1		//rotates the time into the carry
00038b f008                          brcs strobe_on	//if old LSB was 1, i.e. odd turn strobe on
00038c f410                          brcc strobe_off	//if old LSB was 0, i.e even turn strobe off
                                 
                                 strobe_on:
00038d 9a11                          lcd_set 1		//set PORTA bit to 1
00038e c002                      	rjmp strobe_end
                                 strobe_off:
00038f 9811                          lcd_clr 1
000390 c000                      	rjmp strobe_end
                                 Strobe_end:
000391 916f                          pop arg1
000392 914f                      	pop temp1
000393 bf4f                      	out SREG, temp1
000394 914f                      	pop temp1
000395 9508                      	ret
                                 	
                                 //SCAN				//return value in arg1
                                 scan:
000396 930f                          push r16 // row
000397 931f                          push r17 // col
000398 932f                          push r18 // rmask // r18 will be used to return the input_value
000399 933f                          push r19 // cmask
00039a 934f                          push temp1
00039b 935f                          push temp2 
00039c 936f                          push arg1 // floor
00039d 937f                          push arg2 // floor2
00039e ee3f                          ldi r19, INITCOLMASK   	 ; load column mask to scan a column
00039f 2711                          clr r17
                                 
                                 
0003a0 24aa                      	clr ret1
                                 colloop:
0003a1 3014                          cpi r17, 4   				 ; check if all columns scanned
0003a2 f169                          breq scan_end   		 ; restart scan if all cols scanned
0003a3 9330 010b                     sts PORTL, r19   		 ; scan a column (sts used instead of out since PORTL is in extended I/O space)
0003a5 ef4f                          ldi temp1, 0xFF   			 ; slow down scan operation (???? WHY ????)
                                 
                                 delay:
0003a6 954a                          dec temp1
0003a7 f7f1                          brne delay
                                 
0003a8 9160 0109                     lds arg1, PINL   		;load current status of PORTL pins(lds must be used instead of in)
0003aa 706f                          andi arg1, ROWMASK   		 ; and the PINL register with row mask
0003ab 306f                          cpi arg1, 0xF   			 ; check if any row low
0003ac f059                          breq nextcol   			 ; if temp is all 1s (i.e 0xF), then there are now lows
                                    							 ; if there is a low, find which row it is
0003ad e021                          ldi r18, INITROWMASK   	 ; load Row mask
0003ae 2700                          clr r16
                                 
                                 rowloop:
0003af 3004                          cpi r16, 4   			; if all rows scanned, jump to next column
0003b0 f039                          breq nextcol
0003b1 2f56                          mov temp2, arg1  			 
0003b2 2352                          and temp2, r18   		 ; mask the input with row mask
0003b3 f041                          breq show   				; if the bit is clear, a key has been pressed
                                    							 ; eg if a key in row 1 is pressed, temp2 = XXXX1101
                                    							 ; rmask should equal 00000010
                                    							 ; when AND is used, result is 00000000 -> button pressed
0003b4 9503                          inc r16   				 ; move to next row
0003b5 0f22                          lsl r18   				 ; left shift mask to check next row
0003b6 940c 03af                     jmp rowloop
                                 
                                 nextcol:   					 ; jump to next column when row scan over
0003b8 0f33                          lsl r19   				 ; left shift mask to check next col
0003b9 9513                          inc r17
0003ba 940c 03a1                     jmp colloop
                                 
                                 show:
                                 	
0003bc 3013                          cpi r17, 3   			; if column = 3, a key in column 3 is pressed, which is a 									letter key
0003bd f091                          breq scan_end   				 ; we dont need to deal with this for this lab, so go to n_a
                                 
0003be 3003                          cpi r16, 3   				 ; if row = 3, a key in row 3 has been pressed, which is any 								special character or 0
0003bf f039                          breq check_bottom_row				 ; zero is the only key we are worried about, so go to check_zero
                                 	
0003c0 2f60                      	mov arg1, r16				; move row to floor
0003c1 0f66                      	lsl arg1					; multiply by 2
0003c2 0f60                      	add arg1, r16				; add row again, to multiply row by 3
0003c3 0f61                      	add arg1, r17				; add col
0003c4 5f6f                      	subi arg1, -1				; add 1
0003c5 940c 03cf                 	jmp end_show
                                 
                                 check_bottom_row:
0003c7 3010                      	cpi r17, 0
0003c8 f029                      	breq asterisk
                                 
0003c9 3011                      	cpi r17, 1
0003ca e06a                      	ldi arg1, 10
0003cb f019                      	breq end_show
                                 
0003cc 940c 03d0                 	jmp scan_end
                                 
                                 asterisk:
                                 	;rcall emergency_func
0003ce c001                      	rjmp scan_end
                                 
                                 	
                                 end_show:
                                 
0003cf 2ea6                      	mov ret1, arg1
                                 
                                 
                                 scan_end:
                                 /*	ldi temp1, 3		//ONLY FOR DEBUGGING
                                 	mov ret1, temp1*/
                                 /*	cpse ret1, zero
                                 	out PORTG, one*/
0003d0 917f                      	pop arg2
0003d1 916f                      	pop arg1
0003d2 915f                      	pop temp2
0003d3 914f                      	pop temp1
0003d4 913f                      	pop r19
0003d5 912f                      	pop r18
0003d6 911f                      	pop r17
0003d7 910f                      	pop r16
                                 
0003d8 9508                      	ret
                                 																		
                                 //FUNCTION shuffle_queue
                                 
                                 shuffle_queue:
0003d9 93ef                      	push ZL
0003da 93ff                      	push ZH
0003db 934f                      	push temp1
0003dc 935f                      	push temp2
0003dd 936f                      	push arg1
0003de 937f                      	push arg2
0003df 927f                      	push counter
                                 	
0003e0 e0e1                      	ldi ZL, low(Queue)
0003e1 e0f2                      	ldi ZH, high(Queue)
                                 
0003e2 9140 0200                 	lds temp1, Queue_len
0003e4 0fe4                      	add ZL, temp1
0003e5 1df3                      	adc ZH, zero
                                 
0003e6 9731                      	sbiw Z, 1
0003e7 2477                      	clr counter
0003e8 2766                      	clr arg1
                                 shuffle_loop:
                                 	//Z points to the end of the queue
0003e9 9140 0200                 	lds temp1, Queue_len
0003eb 1674                      	cp counter, temp1
0003ec f031                      	breq shuffle_loop_end
0003ed 8170                      	ld arg2, Z
0003ee 8360                      	st Z, arg1
0003ef 2f67                      	mov arg1, arg2
0003f0 9473                      	inc counter
0003f1 9731                      	sbiw Z, 1
0003f2 cff6                      	rjmp shuffle_loop
                                 shuffle_loop_end:
0003f3 9140 0200                 	lds temp1, Queue_len
0003f5 954a                      	dec temp1
0003f6 9340 0200                 	sts Queue_len, temp1
                                 
                                 
0003f8 907f                      	pop counter
0003f9 917f                      	pop arg2
0003fa 916f                      	pop arg1
0003fb 915f                      	pop temp2
0003fc 914f                      	pop temp1
0003fd 91ff                      	pop ZH	
0003fe 91ef                       	pop ZL
                                 
0003ff 9508                      	ret
                                 
                                 
                                 
                                 
                                 	
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :  10 y  :   0 z  :   6 r0 :   0 r1 :   0 r2 :   0 r3 :  14 r4 :   3 
r5 :   0 r6 :   0 r7 :  28 r8 :   5 r9 :   5 r10:   6 r11:   1 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  45 r17:  20 r18:  24 r19:  38 r20: 283 
r21:  72 r22:  47 r23:  15 r24:  28 r25:  21 r26:   9 r27:   9 r28:   4 
r29:   4 r30:   7 r31:   7 
Registers used: 25 out of 35 (71.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   4 adiw  :   8 and   :   1 
andi  :  10 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   3 break :   0 breq  :  34 brge  :   5 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 brlt  :   5 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   6 cbr   :  12 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  26 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  22 cpc   :   2 
cpi   :  33 cpse  :   2 dec   :   4 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :  16 jmp   :  18 ld    :   6 ldd   :   0 ldi   :  87 
lds   :  23 lpm   :   2 lsl   :   5 lsr   :   0 mov   :  31 movw  :   2 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 or    :   0 
ori   :  13 out   :  28 pop   : 112 push  : 110 rcall : 127 ret   :  12 
reti  :   4 rjmp  :  37 rol   :   0 ror   :   2 sbc   :   1 sbci  :   0 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   6 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   3 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :  38 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 51 out of 116 (44.0%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000800   1964      4   1968  262144   0.8%
[.dseg] 0x000200 0x000215      0     21     21    8192   0.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 2 warnings
