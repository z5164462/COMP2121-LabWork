
AVRASM ver. 2.2.7  E:\19t1\COMP2121\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm Wed May 01 13:29:42 2019

[builtin](2): Including file 'F:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
E:\19t1\COMP2121\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm(24): Including file 'F:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'F:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
E:\19t1\COMP2121\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm(24): Including file 'F:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Assignment V1.asm
                                 ;
                                 ; Created: 31/03/2019 9:58:14 AM
                                 ; Author : andrew fleming z5164462 anirudh ramia z5164466
                                 ;
                                 
                                 /*Assumptions !!!!
                                 
                                 The Emergency call cannot be cancelled until the lift reaches the first floor
                                 and has completed the opening and closing routinues
                                 
                                 The doors for the emergency will be open for 7 seconds
                                 If asterisk is pressed during emergency, during opening, doors Open and closing, the lift will cancel the emergency as soon as the doors have closed
                                 
                                 
                                 Any button press length is counted as a hold for the hold open doors duration
                                 */
                                 
                                 
                                 ; Replace with your application code
                                 
                                 ; initial definitions and assignments
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Data Memory allocations
                                 .dseg
                                 Queue_len:
000200                               .byte 1
                                 Queue:
000201                           	.byte 10
                                 Count:
00020b                               .byte 2
                                 Seconds:
00020d                               .byte 2
                                 
                                 
                                 //Register definitions
                                 .cseg
                                 
                                 
                                 .def zero = r3					; holds the value zero
                                 .def one = r4					; holds the value one
                                 .def flip_flash = r5			; used to increment the counter for the LED and strobe flashing
                                 .def counter = r7				; generic counter
                                 .def ret1 = r10					; used as the return value for functions
                                 .def debounce1 = r11			; used as the debounce counter for INT0
                                 .def debounce2 = r12			; used as the debounce counter for INT1
                                 .def lift_status = r13			; set of lift status flag, see below
                                 .def old_floor = r14 			; used to restore the floor from the emergency function
                                 .def current_floor = r16		; holds the current floor
                                 .def requested_floor = r17		; holds the requested floor
                                 .def input_value = r18			; takes the input value from the keypad
                                 .def temp1 = r20				; temporary register 1
                                 .def temp2 = r21				; temporary register 2
                                 .def arg1 = r22					; function argument register 1
                                 .def arg2 = r23					; function argument register 2
                                 
                                 
                                 /*
                                 lift_status is a status register with the bits as flags
                                 b0 = Stopped?
                                 b1 = Going up?
                                 b2 = Doors Open?
                                 b3 = Doors Opening?
                                 b4 = Doors Closing?
                                 b5 = Flash on?
                                 b6 = Emergency?
                                 b7 = Held?
                                 */
                                 
                                 
                                 .equ stopped =   		0b00000001		; is lift stopped?
                                 .equ goingUp =   		0b00000010		; is lift going up?
                                 .equ doorsOpen =		0b00000100		; are the doors open?
                                 .equ opening =   		0b00001000		; are the doors opening?
                                 .equ closing =   		0b00010000		; are the doors closing? if no to open, opening and closing, they closed
                                 .equ flashing =   		0b00100000		; is the LED bar flashing
                                 .equ emergency =		0b01000000		; is there an emergency
                                 .equ held =   			0b10000000		; is the lift held
                                 
                                 //LCD interface constants
                                 .equ PORTLDIR = 0xF0   			; 0xF0 = 0b11110000 -> Setting PORTA 7:4 as output and 3:0 as input
                                 .equ INITCOLMASK = 0XEF   		; 0xEF = 0b11101111 -> Mask to decide which column is selected
                                 .equ INITROWMASK = 0x01   		; 0x01 = 0b00000001 -> Mask to check which row is selected
                                 .equ ROWMASK = 0x0F   			; 0x0F = 0b00001111 -> To get keyboard output value using an AND operation
                                 .equ LCD_RS = 7					; LCD bit numbers
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 .equ l_one = 0b10000000			; Used to set LCD to line one
                                 .equ l_two = 0b11000000			; and line two
                                 
                                 
                                 .equ clock_speed = 781			; 781 clock cycles ~= 0.1 seconds
                                 
                                 
                                 // Lift Status Macros
                                 
                                 //Lift Flag checking  
                                 //usage check_register_bit flagName
                                 //	breq action
                                 .macro check_register_bit
                                 	push temp1
                                     mov temp1, lift_status
                                     andi temp1, @0
                                     cpi temp1, @0
                                 	pop temp1
                                 .endmacro
                                 
                                 //Lift Flag clearing
                                 //usage clear_register_bit flagName
                                 .macro clear_register_bit
                                 	push temp1
                                     mov temp1, lift_status
                                 	cbr temp1, @0
                                 	mov lift_status, temp1
                                 	pop temp1
                                 .endmacro
                                 
                                 //Lift Flag setting
                                 //usage set_register_bit flagName
                                 .macro set_register_bit
                                 	push temp1
                                     mov temp1, lift_status
                                 	sbr temp1, @0
                                 	mov lift_status, temp1
                                 	pop temp1
                                 .endmacro
                                 
                                 
                                 //Clear Word macro
                                 .macro clear
                                     sts @0, zero
                                     sts @0+1, zero
                                 .endmacro
                                 
                                 //LCD MACROS
                                 .macro do_lcd_command   					 ; LCD commands
                                     ldi temp1, @0
                                     rcall lcd_command
                                     rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_command_reg   				 ; LCD commands, with registers
                                     mov temp1, @0
                                     rcall lcd_command
                                     rcall lcd_wait
                                 .endmacro
                                 
                                 .macro change_line   						 ; change line and cursor position on line
                                 	push temp1
                                 	push temp2
                                     ldi temp1, @0
                                     cpi temp1, 2
                                     breq line_two
                                     ldi temp2, l_one
                                     ori temp2, @1
                                     do_lcd_command_reg temp2
                                     jmp end_cl
                                 line_two:
                                     ldi temp2, l_two
                                     ori temp2, @1
                                     do_lcd_command_reg temp2
                                 end_cl:
                                 	pop temp2
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro write   								; write immediate data to LCD screen
                                     push temp1
                                 	ldi temp1, @0
                                     rcall lcd_data
                                     rcall lcd_wait
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro write_reg   							; write register data to LCD screen
                                     push temp1
                                 	mov temp1, @0
                                     rcall lcd_data
                                     rcall lcd_wait
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro clear_disp   						 ; clear the LCD Display
                                     do_lcd_command 0b00000001
                                 .endmacro
                                 
                                 .macro lcd_set   							 ; set bit in PORTA
                                     sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr   							 ; clear bit in PORTA
                                     cbi PORTA, @0
                                 .endmacro
                                 
                                 //NOTE lcd_set 1 and lcd_clr 1 are also used to control the strobe light as the strobe is connected to Port A Pin 1
                                 
                                 //Set the PWM trigger level, which controls the motor speed
                                 .macro set_motor_speed
                                 	push temp1
                                 	ldi temp1, @0
                                 	sts OCR3BL, temp1
                                 	clr temp1
                                 	sts OCR3BH, temp1	
                                 	pop temp1
                                 .endmacro
                                 
                                 
                                 //Interrupt vectors
                                 
                                 .org 0x0000			; reset address
000000 940c 0032                     jmp RESET
                                 .org INT0addr		; interrupt 1 address
000002 940c 013c                     jmp EXT_INT0
                                 .org INT1addr		; interrupt 2 address
000004 940c 0144                     jmp EXT_INT1
                                 .org OVF0addr		; timer 0 interrupt
00002e 940c 015e                     jmp Timer0OVF
                                 .org OVF1addr
000028 940c 0184                 	jmp Timer1OVF	; timer 1 interrupt
                                 .org 0x30
                                 
                                 
                                 divisors:			; used to convert 2 digit numbers to ascii
000030 000a
000031 0001                      	 .dw  10, 1
                                 
                                 
                                 // ---------------------------------------- RESET \/
                                 
                                 RESET:
000032 ef4f                          ldi temp1, low(RAMEND)    ; Init stack frame
000033 bf4d                          out SPL, temp1
000034 e241                          ldi temp1, high(RAMEND)
000035 bf4e                          out SPH, temp1
                                 
                                 
000036 934f
000037 2d4d
000038 7f4e
000039 2ed4
00003a 914f                      	clear_register_bit stopped		; 0
00003b 934f
00003c 2d4d
00003d 6042
00003e 2ed4
00003f 914f                      	set_register_bit goingUp		; 1
000040 934f
000041 2d4d
000042 7f4b
000043 2ed4
000044 914f                      	clear_register_bit doorsOpen	; 0
000045 934f
000046 2d4d
000047 7f47
000048 2ed4
000049 914f                      	clear_register_bit opening		; 0
00004a 934f
00004b 2d4d
00004c 7e4f
00004d 2ed4
00004e 914f                      	clear_register_bit closing		; 0
00004f 934f
000050 2d4d
000051 7d4f
000052 2ed4
000053 914f                      	clear_register_bit flashing		; 0
000054 934f
000055 2d4d
000056 7b4f
000057 2ed4
000058 914f                      	clear_register_bit emergency	; 0
000059 934f
00005a 2d4d
00005b 774f
00005c 2ed4
00005d 914f                      	clear_register_bit held			; 0
                                 
00005e e001                      	ldi current_floor, 1
                                 	
                                 
00005f 2433                          clr zero   				; zero
000060 2444                          clr one   				 
000061 9443                          inc one   				; one
000062 2455                      	clr flip_flash			
000063 24aa                      	clr ret1
                                 
000064 ef4f                       	ser temp1				; set debounce1 and debounce2 to max value
000065 2eb4                      	mov debounce1, temp1	; NOTE the interrupt counter only counts when its not the max value
000066 2ec4                      	mov debounce2, temp1
                                 
000067 9230 0200                 	sts Queue_len, zero
                                 
000069 ef40                          ldi temp1, PORTLDIR   	; p7-4 outputs, p3-0 inputs
00006a e05f                      	ldi temp2, 0b00001111	; send 1 to p3-0 to activate pull up resistors
00006b 9340 010a                     sts DDRL, temp1
00006d 9340 010b                 	sts PORTL, temp1
                                 
                                  			 
                                 
00006f ef4f                      	ser temp1
000070 b947                          out DDRC, temp1   			; LED Lower
000071 bb43                          out DDRG, temp1   			; LED Higher
                                 	
000072 2744                      	clr temp1
000073 b94a                          out DDRD, temp1   			; Buttons
                                 
000074 e140                      	ldi temp1, 0b00010000
000075 b94d                      	out DDRE, temp1				; PWM generator
                                 
000076 e24a                          ldi temp1, 0b00101010		; falling edges for interrupts 2, 1 and 0
000077 9340 0069                     sts EICRA, temp1   										
                                 
                                 
                                 
000079 b34d                          in temp1, EIMSK				; enable Interrupts 0,1,2
00007a 6041                      	ori temp1, (1<<INT0)
00007b 6042                      	ori temp1, (1<<INT1)
00007c 6044                          ori temp1, (1<<INT2)
00007d bb4d                          out EIMSK, temp1
                                     
00007e e040                          ldi temp1, 0b00000000				; Normal mode for clock 0
00007f bd44                          out TCCR0A, temp1
000080 e042                          ldi temp1, 0b00000010				; 8 Prescaler
000081 bd45                          out TCCR0B, temp1
000082 e041                          ldi temp1, 1<<TOIE0					; enable Timer interrupt
000083 9340 006e                     sts TIMSK0, temp1
                                 
000085 e040                      	ldi temp1, 0b00000000				; Normal mode for clock 1
000086 9340 0080                     sts TCCR1A, temp1
000088 e042                          ldi temp1, 0b00000010				; 8 prescaler
000089 9340 0081                     sts TCCR1B, temp1
00008b e241                          ldi temp1, 1<<TOIE1|1<<ICIE1		; enable Timer interrupt
00008c 9340 006f                     sts TIMSK1, temp1
                                 
00008e e241                      	ldi temp1, (1<<COM3B1) | (1<<WGM30)	; toggle OC3B on compare match, PWM Phase and frequency correct
00008f 9340 0090                 	sts TCCR3A, temp1
000091 e041                      	ldi temp1, (1<<CS30)				; no prescaling
000092 9340 0091                 	sts TCCR3B, temp1
                                 
                                 	
                                 //from LCD-example LCD setup
000094 ef4f                          ser temp1
000095 bb40                          out DDRF, temp1				; set Port A and Port F as outputs				
000096 b941                          out DDRA, temp1
                                 
000097 2744                          clr temp1
000098 bb41                          out PORTF, temp1
000099 b942                          out PORTA, temp1
                                 
00009a e348
00009b d4bb
00009c d4ca                          do_lcd_command 0b00111000	; 2x5x7
00009d d4e3                          rcall sleep_5ms
00009e e348
00009f d4b7
0000a0 d4c6                          do_lcd_command 0b00111000	; 2x5x7
0000a1 d4d6                      	rcall sleep_1ms
0000a2 e348
0000a3 d4b3
0000a4 d4c2                          do_lcd_command 0b00111000	; 2x5x7
0000a5 e348
0000a6 d4b0
0000a7 d4bf                          do_lcd_command 0b00111000	; 2x5x7
0000a8 e048
0000a9 d4ad
0000aa d4bc                          do_lcd_command 0b00001000	; display off?
0000ab e041
0000ac d4aa
0000ad d4b9                          do_lcd_command 0b00000001	; clear display
0000ae e046
0000af d4a7
0000b0 d4b6                          do_lcd_command 0b00000110	; increment, no display shift
0000b1 e04e
0000b2 d4a4
0000b3 d4b3                          do_lcd_command 0b00001110	; Cursor on, bar, no blink
                                 
0000b4 e041
0000b5 d4a1
0000b6 d4b0                      	clear_disp					; setup initial display
0000b7 934f
0000b8 e443
0000b9 d4a4
0000ba d4ac
0000bb 914f                      	write 'C'
0000bc 934f
0000bd e745
0000be d49f
0000bf d4a7
0000c0 914f                      	write 'u'
0000c1 934f
0000c2 e742
0000c3 d49a
0000c4 d4a2
0000c5 914f                      	write 'r'
0000c6 934f
0000c7 e742
0000c8 d495
0000c9 d49d
0000ca 914f                      	write 'r'
0000cb 934f
0000cc e645
0000cd d490
0000ce d498
0000cf 914f                      	write 'e'
0000d0 934f
0000d1 e64e
0000d2 d48b
0000d3 d493
0000d4 914f                      	write 'n'
0000d5 934f
0000d6 e744
0000d7 d486
0000d8 d48e
0000d9 914f                      	write 't'
0000da 934f
0000db e240
0000dc d481
0000dd d489
0000de 914f                      	write ' '
0000df 934f
0000e0 e646
0000e1 d47c
0000e2 d484
0000e3 914f                      	write 'f'
0000e4 934f
0000e5 e64c
0000e6 d477
0000e7 d47f
0000e8 914f                      	write 'l'
0000e9 934f
0000ea e64f
0000eb d472
0000ec d47a
0000ed 914f                      	write 'o'
0000ee 934f
0000ef e64f
0000f0 d46d
0000f1 d475
0000f2 914f                      	write 'o'
0000f3 934f
0000f4 e742
0000f5 d468
0000f6 d470
0000f7 914f                      	write 'r'
                                 
0000f8 934f
0000f9 935f
0000fa e042
0000fb 3042
0000fc f039
0000fd e850
0000fe 6050
0000ff 2f45
000100 d456
000101 d465
000102 940c 0109
000104 ec50
000105 6050
000106 2f45
000107 d44f
000108 d45e
000109 915f
00010a 914f                      	change_line 2, 0
                                 	
00010b 934f
00010c e44e
00010d d450
00010e d458
00010f 914f                      	write 'N'
000110 934f
000111 e645
000112 d44b
000113 d453
000114 914f                      	write 'e'
000115 934f
000116 e748
000117 d446
000118 d44e
000119 914f                      	write 'x'
00011a 934f
00011b e744
00011c d441
00011d d449
00011e 914f                      	write 't'
00011f 934f
000120 e240
000121 d43c
000122 d444
000123 914f                      	write ' '
000124 934f
000125 e743
000126 d437
000127 d43f
000128 914f                      	write 's'
000129 934f
00012a e744
00012b d432
00012c d43a
00012d 914f                      	write 't'
00012e 934f
00012f e64f
000130 d42d
000131 d435
000132 914f                      	write 'o'
000133 934f
000134 e740
000135 d428
000136 d430
000137 914f                      	write 'p'
                                 
000138 d4cc                      	rcall show_floor
000139 9478                          sei
                                 
00013a 940c 0213                     jmp main
                                 
                                 // ---------------------------------------- RESET /\
                                 
                                 
                                 // ---------------------------------------- PUSH BUTTON 0 Interrupt Handler \/
                                 
                                 EXT_INT0:
00013c 934f
00013d 2d4d
00013e 7044
00013f 3044
000140 914f                      	check_register_bit doorsOpen	; only accept button press if doors are open
000141 f409                      	brne INT0_END
000142 24bb                      	clr debounce1					; clear the debounce counter
                                 INT0_END:
000143 9518                          reti
                                 
                                 // ---------------------------------------- PUSH BUTTON 0 Interrupt Handler /\
                                 
                                 
                                 
                                 
                                 
                                 // ---------------------------------------- PUSH BUTTON 1 Interrupt Handler \/
                                 
                                 EXT_INT1:
000144 934f
000145 2d4d
000146 7140
000147 3140
000148 914f                      	check_register_bit closing		; accept button press if doors are closing
000149 f069                      	breq RE_OPEN
00014a 934f
00014b 2d4d
00014c 7044
00014d 3044
00014e 914f                      	check_register_bit doorsOpen	; accept button press if doors are opening
00014f f049                      	breq HELD_OPEN
000150 934f
000151 2d4d
000152 7840
000153 3840
000154 914f                      	check_register_bit held			; accept button release if button is held
000155 f029                      	breq LET_CLOSE
000156 c006                      	rjmp INT1_END
                                 RE_OPEN:
000157 24cc                      	clr debounce2					; clear debounce counter
000158 c004                      	rjmp INT1_END
                                 HELD_OPEN:
000159 24cc                      	clr debounce2
00015a c002                      	rjmp INT1_END
                                 LET_CLOSE:
00015b 24cc                      	clr debounce2
00015c c000                      	rjmp INT1_END
                                 INT1_END:
00015d 9518                          reti
                                 
                                 // ---------------------------------------- PUSH BUTTON 1 Interrupt Handler /\
                                 
                                 // ---------------------------------------- TIMER0 Interrupt Handler \/
                                 Timer0OVF:
00015e 934f                      	push temp1
00015f b74f                          in temp1, SREG   				; stack frame for timer interrupt handler
000160 934f                          push temp1
000161 939f                          push r25
000162 938f                          push r24
                                 
000163 9180 020b                     lds r24, Count   				; increment count
000165 9190 020c                     lds r25, Count + 1
000167 9601                          adiw r25:r24, 1
                                     
000168 308d                          cpi r24, low(clock_speed)		; compare with clock speed to check if 1/10 of second has passed
000169 e043                          ldi temp1, high(clock_speed)
00016a 0794                          cpc r25, temp1
00016b f471                          brne Not_second
                                     
                                 
00016c 9180 020d                 	lds r24, Seconds   				; increment seconds every 1/10 of second
00016e 9190 020e                     lds r25, Seconds+1
000170 9601                          adiw r25:r24, 1
000171 9380 020d                     sts Seconds, r24
000173 9390 020e                     sts Seconds+1, r25
                                     
000175 9230 020b
000177 9230 020c                 	clear Count						; clear Count
000179 c004                          rjmp End_I
                                 
                                 Not_second:							; increment Count
00017a 9380 020b                     sts Count, r24
00017c 9390 020c                     sts Count+1, r25
                                 
                                 End_I:
00017e 919f                          pop r25
00017f 918f                          pop r24
000180 914f                          pop temp1
000181 bf4f                          out SREG, temp1
000182 914f                      	pop temp1
000183 9518                          reti
                                 
                                 // ---------------------------------------- TIMER0 Interrupt Handler /\
                                 
                                 
                                 // ---------------------------------------- TIMER1 Interrupt Handler \/
                                 Timer1OVF:
000184 934f                      	push temp1
000185 b74f                      	in temp1, SREG
000186 934f                      	push temp1
000187 93af                      	push XL
000188 93bf                      	push XH
                                 
000189 e045                      	ldi temp1, 5
00018a 1545                      	cp temp1, flip_flash				; check if the flash counter is up to 5
00018b f009                      	breq invert_flash					; if yes then invert flashing
00018c c014                      	rjmp count_flash
                                 invert_flash:
00018d 934f
00018e 2d4d
00018f 7240
000190 3240
000191 914f                      		check_register_bit flashing		; if the flashing flag is on turn it off
000192 f009                      		breq flash_to_zero				; if the flashing flag is off turn it on
000193 c006                      		rjmp flash_to_one
                                 	flash_to_zero:
000194 934f
000195 2d4d
000196 7d4f
000197 2ed4
000198 914f                      		clear_register_bit flashing
000199 c005                      		rjmp invert_end
                                 	flash_to_one:
00019a 934f
00019b 2d4d
00019c 6240
00019d 2ed4
00019e 914f                      		set_register_bit flashing
                                 	invert_end:
00019f 2455                      		clr flip_flash
0001a0 c001                      		rjmp flash_continue
                                 count_flash:							; else increment flash counter (flip_flash)
0001a1 9453                      	inc flip_flash	
                                 flash_continue:
                                 
0001a2 ef4f                      	ser temp1							; check if debounce1 is set to max, i.e has not been triggered
0001a3 16b4                      	cp debounce1, temp1
0001a4 f0d9                      	breq DB2
0001a5 e043                      	ldi temp1, 3						; check if it has been 3 clock cycles after the last trigger
0001a6 16b4                      	cp debounce1, temp1
0001a7 f414                      	brge action1
0001a8 94b3                      	inc debounce1						; if not increment debounce1
0001a9 c016                      	rjmp  DB2
                                 action1:
0001aa 934f
0001ab 2d4d
0001ac 7044
0001ad 3044
0001ae 914f                      	check_register_bit doorsOpen		; if doors are open
0001af f471                      	brne END_DB1
0001b0 934f
0001b1 2d4d
0001b2 7f4b
0001b3 2ed4
0001b4 914f                      	clear_register_bit doorsOpen		; clear the doorsOpen flag
0001b5 934f
0001b6 2d4d
0001b7 6140
0001b8 2ed4
0001b9 914f                      	set_register_bit closing			; set the closing flag
0001ba 9230 020d
0001bc 9230 020e                 	clear Seconds
                                 
                                 END_DB1:
0001be ef4f                      	ser temp1							; set debounce1 back to max, mark as untriggered
0001bf 2eb4                      	mov debounce1, temp1
                                 
                                 DB2:									
0001c0 ef4f                      	ser temp1							; check if debounce2 is set to max, i.e has not been triggered
0001c1 16c4                      	cp debounce2, temp1
0001c2 f409                      	brne valid_interrupt2
0001c3 c049                      	rjmp End_timer1
                                 valid_interrupt2:
0001c4 e043                      	ldi temp1, 3						; check if it has been 3 clock cycles after the last trigger
0001c5 16c4                      	cp debounce2, temp1
0001c6 f414                      	brge action2
0001c7 94c3                      	inc debounce2						; if not increment debounce2
0001c8 c044                      	rjmp End_Timer1
                                 action2:
0001c9 934f
0001ca 2d4d
0001cb 7140
0001cc 3140
0001cd 914f                      	check_register_bit closing			; if currently closing, re-open
0001ce f069                      	breq RE_OPEN_ACTION
0001cf 934f
0001d0 2d4d
0001d1 7840
0001d2 3840
0001d3 914f                      	check_register_bit held				; if button is currently held, let close
0001d4 f0f9                      	breq LET_CLOSE_ACTION
0001d5 934f
0001d6 2d4d
0001d7 7044
0001d8 3044
0001d9 914f                      	check_register_bit doorsOpen		; if doors are open, hold them open
0001da f081                      	breq HELD_OPEN_ACTION
0001db c02e                      	rjmp END_DB2
                                 RE_OPEN_ACTION:
0001dc 934f
0001dd 2d4d
0001de 7e4f
0001df 2ed4
0001e0 914f                      	clear_register_bit closing			; to re-open, clear the closing flag
0001e1 934f
0001e2 2d4d
0001e3 6048
0001e4 2ed4
0001e5 914f                      	set_register_bit opening			; and set the opening flag
0001e6 9230 020d
0001e8 9230 020e                 	clear Seconds
0001ea c01f                      	rjmp END_DB2
                                 HELD_OPEN_ACTION:
                                 										; to start holding the door
0001eb 934f
0001ec 2d4d
0001ed 6840
0001ee 2ed4
0001ef 914f                      	set_register_bit held				; set the held flag and wait for a rising edge
0001f0 e24e                      	ldi temp1, 0b00101110				; falling edges for interrupts 2 and 0  RISING edge for interrupt 1
0001f1 9340 0069                     sts EICRA, temp1
0001f3 c016                      	rjmp END_DB2 	
                                 LET_CLOSE_ACTION:
                                 										; to stop holding the door
0001f4 934f
0001f5 2d4d
0001f6 774f
0001f7 2ed4
0001f8 914f                      	clear_register_bit held				; clear the held flag
0001f9 934f
0001fa 2d4d
0001fb 7f4b
0001fc 2ed4
0001fd 914f                      	clear_register_bit doorsOpen		; clear the doors open flag
0001fe 934f
0001ff 2d4d
000200 6140
000201 2ed4
000202 914f                      	set_register_bit closing			; set the closing flag
000203 e24a                          ldi temp1, 0b00101010				; falling edges for interrupts 2, 1 and 0
000204 9340 0069                     sts EICRA, temp1 
000206 9230 020d
000208 9230 020e                 	clear Seconds
                                 
                                 END_DB2:
00020a 9811                      	lcd_clr 1
00020b ef4f                      	ser temp1							; set debounce2 to max, to mark as untriggered
00020c 2ec4                      	mov debounce2, temp1
                                 	
                                 
                                 End_Timer1:
00020d 91bf                      	pop XH
00020e 91af                      	pop XL
00020f 914f                      	pop temp1
000210 bf4f                      	out SREG, temp1
000211 914f                      	pop temp1
000212 9518                      	reti
                                 
                                 // Function to insert input floor into list
                                 // parameters Address of queue (X), input_floor (arg1), current_floor (global), direction (b1 of r20, global)
                                 // will set requested_floor (global), direction (b1 of r20, global)
                                 
                                 // ---------------------------------------- TIMER1 Interrupt Handler /\
                                 
                                 
                                 
                                 //MAIN:
                                 main:
                                 
                                 // ---------------------------------------- SCANNING THE KEYPAD \/
                                 
000213 934f
000214 935f
000215 e041
000216 3042
000217 f039
000218 e850
000219 605e
00021a 2f45
00021b d33b
00021c d34a
00021d 940c 0224
00021f ec50
000220 605e
000221 2f45
000222 d334
000223 d343
000224 915f
000225 914f                      	change_line 1, 14						
000226 2f60                      	mov arg1, current_floor					; write current floor on display
000227 d3f5                      	rcall convert_to_ascii
000228 934f
000229 935f
00022a e042
00022b 3042
00022c f039
00022d e850
00022e 605a
00022f 2f45
000230 d326
000231 d335
000232 940c 0239
000234 ec50
000235 605a
000236 2f45
000237 d31f
000238 d32e
000239 915f
00023a 914f                      	change_line 2, 10						; write requested floor on display
00023b 2f61                      	mov arg1, requested_floor
00023c d3e0                      	rcall convert_to_ascii
                                 /*	change_line 2, 14
                                 	lds arg1, Seconds
                                 	rcall convert_to_ascii*/
00023d d44e                      	rcall scan								; read keypad 
                                 
00023e 2d2a                      	mov input_value, ret1					; move the return value from the keypad to input_value
                                 
                                 
00023f 322a                      	cpi input_value, '*'					; check if input value is an asterisk
000240 f431                      	brne add_to_queue						; if its not, its a digit and add to request queue
000241 934f
000242 2d4d
000243 6440
000244 2ed4
000245 914f                      	set_register_bit emergency				; if it is, set emergency bit
000246 d0d6                      	rcall emergency_func					; and call emergency function
                                 add_to_queue:
000247 9140 0200                 	lds temp1, Queue_len					; is the queue empty?
000249 3040                      	cpi temp1, 0
00024a f421                      	brne insert	
00024b 9230 020d
00024d 9230 020e                 	clear Seconds							; clear seconds to ensure 2 second travel time between floors
                                 insert:
00024f d342                      	rcall insert_request					; for numbers, call insert request to add to queue
                                 	
                                 // ---------------------------------------- SCANNING THE KEYPAD	/\
                                 
                                 // ---------------------------------------- CHECKING STOPPED \/
                                 
000250 934f
000251 2d4d
000252 7041
000253 3041
000254 914f                      	check_register_bit stopped				; check if lift is stopped
000255 f409                      	brne read_queue							; if not, read queue and move floors
000256 c040                      	rjmp stop_here							; else stop at floor
                                 
                                 // ---------------------------------------- CHECKING STOPPED /\
                                 
                                 // ---------------------------------------- DISPLAYING THE CURRENT FLOOR AND REQUESTED FLOOR \/
                                 read_queue:
000257 d3ad                      	rcall show_floor						; display floor
                                 
                                 	
                                 // ---------------------------------------- DISPLAYING THE CURRENT FLOOR AND REQUESTED FLOOR /\
                                 
                                 // ---------------------------------------- READING THE QUEUE \/
                                 	
000258 e010                      	ldi requested_floor, 0					; assume queue empty
000259 9140 0200                 	lds temp1, Queue_len					; is the queue empty?
00025b 3040                      	cpi temp1, 0							
00025c f079                      	breq to_main							; if queue_len is 0, go to main
                                 
                                 	
00025d 9110 0201                 	lds requested_floor, Queue				; load first floor from queue to requested floor
00025f 1701                      	cp current_floor, requested_floor		; on correct floor?
000260 f469                      	brne check_direction
                                 				
000261 934f
000262 2d4d
000263 6041
000264 2ed4
000265 914f                      	set_register_bit stopped				; first detection of requested_floor
000266 934f
000267 2d4d
000268 6048
000269 2ed4
00026a 914f                      	set_register_bit opening				; door is being opened on floor
00026b c02b                      	rjmp stop_here
                                 // ---------------------------------------- READING THE QUEUE /\
                                 to_main:
00026c 940c 0213                 	jmp main
                                 // ---------------------------------------- MOVING BETWEEN FLOORS \/
                                 check_direction:
00026e f00c                      	brlt direction_up						; check if lift is moving up
00026f f434                      	brge direction_down						; or down
                                 	
                                 direction_up:
000270 934f
000271 2d4d
000272 6042
000273 2ed4
000274 914f                      	set_register_bit goingUp				; if going up, set goingup bit and jump to move
000275 c006                      	rjmp moving
                                 
                                 direction_down:
000276 934f
000277 2d4d
000278 7f4d
000279 2ed4
00027a 914f                      	clear_register_bit goingUp				; if going down, clear goingup bit and jump to move
00027b c000                      	rjmp moving
                                 
                                 moving:
00027c 9180 020d                 	lds r24, Seconds						; load seconds
00027e 9190 020e                 	lds r25, Seconds+1
000280 3184                      	cpi r24, 20								; if not stopping, wait 2 seconds at each floor before moving
                                 	;ldi temp1, high(0)
                                 	;cpc r25, temp1 
                                 
000281 f354                      	brlt to_main
                                 	//out PORTG, one
000282 9230 020d
000284 9230 020e                 	clear Seconds
000286 934f
000287 2d4d
000288 7042
000289 3042
00028a 914f                      	check_register_bit goingUp				; check going up bit to decide direction
00028b f009                      	breq moving_up
00028c c005                      	rjmp moving_down
                                 
                                 
                                 moving_up:
00028d e04a                      	ldi temp1, 10							; don't increment past 10
00028e 1304                      	cpse current_floor, temp1
00028f 9503                      	inc current_floor						; move up a floor
000290 d374                      	rcall show_floor						; update display
000291 cf81                      	rjmp main
                                 
                                 moving_down:
000292 e041                      	ldi temp1, 1							; dont decrement below 1
000293 1304                      	cpse current_floor, temp1
000294 950a                      	dec current_floor						; move down a floor
000295 d36f                      	rcall show_floor						; update display
000296 cf7c                      	rjmp main
                                 // ---------------------------------------- MOVING BETWEEN FLOORS /\
                                 
                                 
                                 // ---------------------------------------- STOPPING AT THE FLOOR \/
                                 stop_here:
000297 934f
000298 2d4d
000299 7048
00029a 3048
00029b 914f                      	check_register_bit opening				; check if door should open 
00029c f069                      	breq opening_sequence					; if it should, start opening sequence
00029d 934f
00029e 2d4d
00029f 7044
0002a0 3044
0002a1 914f                      	check_register_bit doorsOpen			; if door is open, check if door is finished opening
0002a2 f151                      	breq doors_open_sequence				; if it is, jump to doors open sequence
0002a3 934f
0002a4 2d4d
0002a5 7140
0002a6 3140
0002a7 914f                      	check_register_bit closing				; check if door should close
0002a8 f101                      	breq to_closing_sequence				; if it should, jump to closing sequence
0002a9 c070                      	rjmp end_main
                                 
                                 opening_sequence:
0002aa d3bb                      	rcall LED_flash							; flash LED to show doors opening
0002ab 934f
0002ac e44a
0002ad 9340 009a
0002af 2744
0002b0 9340 009b
0002b2 914f                      	set_motor_speed 0x4A					; set open door motor speed
0002b3 9180 020d                 	lds r24, Seconds						; load seconds
0002b5 9190 020e                 	lds r25, Seconds+1
0002b7 308a                      	cpi r24, 10								; door takes 1 second to open
                                 	;ldi temp1, high(0)
                                 	;cpc r25, temp1
0002b8 f40c                      	brge opening_done						; when 1 second has passed, go to opening done
0002b9 cf59                      	rjmp main
                                 
                                 opening_done:
0002ba 9230 020d
0002bc 9230 020e                 	clear Seconds
0002be 934f
0002bf 2d4d
0002c0 7f47
0002c1 2ed4
0002c2 914f                      	clear_register_bit opening				; opening is finished
0002c3 934f
0002c4 2d4d
0002c5 6044
0002c6 2ed4
0002c7 914f                      	set_register_bit doorsOpen				; door is open
0002c8 cf4a                      	rjmp main
                                 
                                 to_closing_sequence:
0002c9 940c 02f2                 	jmp closing_sequence					; go to closing sequence
                                 to_main2:
0002cb 940c 0213                 	jmp main
                                 
                                 doors_open_sequence:
                                 	
0002cd 934f
0002ce e040
0002cf 9340 009a
0002d1 2744
0002d2 9340 009b
0002d4 914f                      	set_motor_speed 0						; when door is open, turn off motor
0002d5 9180 020d                 	lds r24, Seconds						; load seconds
0002d7 9190 020e                 	lds r25, Seconds+1
                                 	//mov arg1, r24			//LED_flash needs the time as an argument
0002d9 d38c                      	rcall LED_flash							; flash LED while door is open
0002da 934f
0002db 2d4d
0002dc 7840
0002dd 3840
0002de 914f                      	check_register_bit held					; check if button is held
0002df f359                      	breq to_main2							; if it is jump to main and restart loop
0002e0 318e                      	cpi r24, 30								; wait 3 seconds on floor with door open
                                 	;ldi temp1, high(0)
                                 	;cpc r25, temp1
0002e1 f40c                      	brge doors_open_done					; after 3 seoncds go to doors open done
0002e2 cf30                      	rjmp main
                                 doors_open_done:
0002e3 9230 020d
0002e5 9230 020e                 	clear Seconds
0002e7 934f
0002e8 2d4d
0002e9 7f4b
0002ea 2ed4
0002eb 914f                      	clear_register_bit doorsOpen			; lift has waited 3 seconds on floor, so clear doorsOpen bit
0002ec 934f
0002ed 2d4d
0002ee 6140
0002ef 2ed4
0002f0 914f                      	set_register_bit closing				; and set closing bit to close door
0002f1 cf21                      	rjmp main
                                 
                                 closing_sequence:
                                 
0002f2 d373                      	rcall LED_flash							; flash LED while closing
0002f3 934f
0002f4 ea4a
0002f5 9340 009a
0002f7 2744
0002f8 9340 009b
0002fa 914f                      	set_motor_speed 0xAA					; set door closing speed
0002fb 9180 020d                 	lds r24, Seconds		 				; load seconds
0002fd 9190 020e                 	lds r25, Seconds+1
0002ff 308a                      	cpi r24, 10								; door takes 1 second to close
                                 	;ldi temp1, high(0)
                                 	;cpc r25, temp1				
000300 f40c                      	brge closing_done						; after 1 second go to closing done
000301 cf11                      	rjmp main
                                 closing_done:
000302 9230 020d
000304 9230 020e                 	clear Seconds
                                 
                                 
000306 934f
000307 2d4d
000308 7e4f
000309 2ed4
00030a 914f                      	clear_register_bit closing				; clear closing bit since door has closed
00030b 934f
00030c 2d4d
00030d 7f4e
00030e 2ed4
00030f 914f                      	clear_register_bit stopped				; clear stopped bit since lift is ready to move again
000310 934f
000311 e040
000312 9340 009a
000314 2744
000315 9340 009b
000317 914f                      	set_motor_speed 0						; turn off motor after door closed
000318 d3b6                      	rcall shuffle_queue						; call shuffle queue. shuffle queue removes visited floors and reshuffles
000319 cef9                      	rjmp main								; queue so that the start of the queue is the next floor
                                 // ---------------------------------------- STOPPING AT THE FLOOR /\
                                 
                                 
                                 // ---------------------------------------- ERROR HANDLING \/
                                 end_main:
00031a ec4c                      	ldi temp1, 0b11001100
00031b b948                      	out PORTC, temp1
00031c cffd                      	rjmp end_main
                                 // ---------------------------------------- ERROR HANDLING /\
                                 //
                                 //		 ____					 ___   _____ _____	 ____			 __
                                 //	   ||	   ||	|	||\   |	/	\	 |	   |	/	 \	||\   |	/  \
                                 //	   ||__	   ||	|   || \  | |		 |	   |   |	  | || \  |	\__
                                 //	   ||	   ||	|   ||  \ | |		 |	   |   |	  | ||  \ |	   \
                                 //	   ||	   ||___/	||   \|	\___/	 |	 __|__	\____/	||   \|	\__/	
                                 //		
                                 //
                                 // ---------------------------------------- EMERGENCY FUNCTION \/
                                 
                                 emergency_func:
                                 ;prologue
00031d 934f                      	push temp1
                                 	
00031e b74f                      	in temp1, SREG							; push SREG so that it isnt changed after the function
00031f 934f                      	push temp1
                                 	
                                 /*	lds temp1, Count						; load Count and Seconds
                                 	push temp1
                                 	
                                 	lds temp1, Count+1
                                 	push temp1
                                 
                                 	lds temp1, Seconds
                                 	push temp1
                                 	
                                 	lds temp1, Seconds+1
                                 	push temp1*/
                                 	
000320 92ef                      	push old_floor							; push old_floor, to be restored after emergency is over
000321 930f                      	push current_floor
000322 938f                      	push r24
000323 939f                      	push r25	
                                 
000324 e041
000325 d231
000326 d240                      	clear_disp								; clear display to write out emergency message
000327 9230 020d
000329 9230 020e                 	clear Seconds
00032b 934f
00032c e445
00032d d230
00032e d238
00032f 914f                      	write 'E'
000330 934f
000331 e64d
000332 d22b
000333 d233
000334 914f                      	write 'm'
000335 934f
000336 e645
000337 d226
000338 d22e
000339 914f                      	write 'e'
00033a 934f
00033b e742
00033c d221
00033d d229
00033e 914f                      	write 'r'
00033f 934f
000340 e647
000341 d21c
000342 d224
000343 914f                      	write 'g'
000344 934f
000345 e645
000346 d217
000347 d21f
000348 914f                      	write 'e'
000349 934f
00034a e64e
00034b d212
00034c d21a
00034d 914f                      	write 'n'
00034e 934f
00034f e643
000350 d20d
000351 d215
000352 914f                      	write 'c'
000353 934f
000354 e749
000355 d208
000356 d210
000357 914f                      	write 'y'
000358 934f
000359 935f
00035a e042
00035b 3042
00035c f039
00035d e850
00035e 6050
00035f 2f45
000360 d1f6
000361 d205
000362 940c 0369
000364 ec50
000365 6050
000366 2f45
000367 d1ef
000368 d1fe
000369 915f
00036a 914f                      	change_line 2, 0
00036b 934f
00036c e443
00036d d1f0
00036e d1f8
00036f 914f                      	write 'C'
000370 934f
000371 e641
000372 d1eb
000373 d1f3
000374 914f                      	write 'a'
000375 934f
000376 e64c
000377 d1e6
000378 d1ee
000379 914f                      	write 'l'
00037a 934f
00037b e64c
00037c d1e1
00037d d1e9
00037e 914f                      	write 'l'
00037f 934f
000380 e240
000381 d1dc
000382 d1e4
000383 914f                      	write ' '
000384 934f
000385 e340
000386 d1d7
000387 d1df
000388 914f                      	write '0'
000389 934f
00038a e340
00038b d1d2
00038c d1da
00038d 914f                      	write '0'
00038e 934f
00038f e340
000390 d1cd
000391 d1d5
000392 914f                      	write '0'
000393 9a11                      	lcd_set 1
                                 
000394 2ee0                      	mov old_floor, current_floor		; for restoring original floor
                                 
000395 934f
000396 2d4d
000397 7048
000398 3048
000399 914f                      	check_register_bit opening			; check if doors are opening
00039a f039                      	breq initial_e_close				;
00039b 934f
00039c 2d4d
00039d 7044
00039e 3044
00039f 914f                      	check_register_bit doorsOpen		; or if doors are opened when emergency called
0003a0 f009                      	breq initial_e_close
0003a1 c018                      	rjmp drop_floor_loop
                                 
                                 initial_e_close:						; close door if opened when emergency called
0003a2 d2c3                      	rcall LED_flash						; LED flash to show door closing
0003a3 934f
0003a4 ea4a
0003a5 9340 009a
0003a7 2744
0003a8 9340 009b
0003aa 914f                      	set_motor_speed 0xAA				; door closing speed
0003ab 9180 020d                 	lds r24, Seconds
0003ad 9190 020e                 	lds r25, Seconds+1
0003af 308a                      	cpi r24, low(10)					; wait 1 second before closing
0003b0 f40c                      	brge initial_e_close_done
0003b1 cff0                      	rjmp initial_e_close
                                 
                                 initial_e_close_done:
0003b2 934f
0003b3 e040
0003b4 9340 009a
0003b6 2744
0003b7 9340 009b
0003b9 914f                      	set_motor_speed 0					; turn motor off when door closed
                                 
                                 drop_floor_loop:						; start emergency routine
0003ba d2bf                      	rcall Strobe_flash					; make strobe light flash
0003bb d249                      	rcall show_floor					; show current floor
0003bc 3001                      	cpi current_floor, 1				; check if lift has reached bottom floor
0003bd f069                      	breq drop_floor_end					; if it has then go to end
0003be 9180 020d                 	lds r24, Seconds					; load seconds
0003c0 9190 020e                 	lds r25, Seconds+1		
0003c2 2f68                      	mov arg1, r24						; move seconds into arg1
0003c3 3184                      	cpi r24, 20							; if 2 seconds has not passed yet, go to the top of the loop
0003c4 f3ac                      	brlt drop_floor_loop
0003c5 950a                      	dec current_floor					; after 2 seconds, go down a floor
0003c6 9230 020d
0003c8 9230 020e                 	clear Seconds						; clear seconds word
0003ca cfef                      	rjmp drop_floor_loop				; go back to top of the loop
                                 
                                 drop_floor_end:
                                 ;~~~~~~~~~~~~~
                                 emergency_opening:						; door opening routine
0003cb d2ae                      	rcall strobe_flash					; make strobe light flash
0003cc d299                      	rcall LED_flash						; flash LED to show door opening
0003cd d2be                      	rcall scan							; scan keypad
0003ce e24a                      	ldi temp1, '*'						
0003cf 16a4                      	cp ret1, temp1						; check if button pressed is '*'
0003d0 f429                      	brne continue_e_opening				; if asterisk not pressed continue opening door
                                 
0003d1 934f
0003d2 2d4d
0003d3 7b4f
0003d4 2ed4
0003d5 914f                      	clear_register_bit emergency		; emergency cancelled if '*' pressed
                                 
                                 continue_e_opening:
0003d6 934f
0003d7 e44a
0003d8 9340 009a
0003da 2744
0003db 9340 009b
0003dd 914f                      	set_motor_speed 0x4A				; run motor to simulate door opening
0003de 9180 020d                 	lds r24, Seconds					; load seconds
0003e0 9190 020e                 	lds r25, Seconds+1
0003e2 308a                      	cpi r24, 10
0003e3 f40c                      	brge emergency_opening_done			; 1 Second passed?
0003e4 cfe6                      	rjmp emergency_opening
                                 
                                 emergency_opening_done:
0003e5 9230 020d
0003e7 9230 020e                 	clear Seconds
                                 
                                 
                                 emergency_doors_open:					
0003e9 d290                      	rcall strobe_flash					; make strobe lights flash
0003ea d27b                      	rcall LED_flash						; flash LED to show door opening
0003eb d2a0                      	rcall scan							; scan keypad
0003ec e24a                      	ldi temp1, '*'
0003ed 16a4                      	cp ret1, temp1						; check if asterisk is pressed
0003ee f451                      	brne continue_e_doors_open
0003ef 934f
0003f0 2d4d
0003f1 7b4f
0003f2 2ed4
0003f3 914f                      	clear_register_bit emergency		; clear bit if emergency is over
0003f4 9230 020d
0003f6 9230 020e                 	clear Seconds
0003f8 c013                      	rjmp emergency_closing
                                 
                                 continue_e_doors_open:
0003f9 934f
0003fa e040
0003fb 9340 009a
0003fd 2744
0003fe 9340 009b
000400 914f                      	set_motor_speed 0					; set motor speed to 0 once door is open
000401 9180 020d                 	lds r24, Seconds					; 3 seconds passed?
000403 9190 020e                 	lds r25, Seconds+1
000405 3486                      	cpi r24, 70							; wait 7 seconds
000406 f40c                      	brge emergency_doors_open_done		; jump to door open end
000407 cfe1                      	rjmp emergency_doors_open
                                 
                                 emergency_doors_open_done:
000408 9230 020d
00040a 9230 020e                 	clear Seconds
                                 
                                 emergency_closing:
00040c d26d                      	rcall strobe_flash					; make strobe lights flash
00040d d258                      	rcall LED_flash						; make LED flash to show door closing
00040e d27d                      	rcall scan							; scan keypad
00040f e24a                      	ldi temp1, '*'
000410 16a4                      	cp ret1, temp1						; check if asterisk pressed
000411 f429                      	brne continue_e_closing
                                 
000412 934f
000413 2d4d
000414 7b4f
000415 2ed4
000416 914f                      	clear_register_bit emergency
                                 
                                 continue_e_closing:						
000417 934f
000418 ea4a
000419 9340 009a
00041b 2744
00041c 9340 009b
00041e 914f                      	set_motor_speed 0xAA				; run motor at different speed to simulate door closing
00041f 9180 020d                 	lds r24, Seconds					; 1 Second passed?
000421 9190 020e                 	lds r25, Seconds+1
000423 308a                      	cpi r24, 10							
000424 f40c                      	brge emergency_closing_done
000425 cfe6                      	rjmp emergency_closing
                                 emergency_closing_done:
000426 9230 020d
000428 9230 020e                 	clear Seconds
00042a 934f
00042b e040
00042c 9340 009a
00042e 2744
00042f 9340 009b
000431 914f                      	set_motor_speed 0					; set motor speed to 0 once door is closed
                                 
                                 
                                 
                                 
                                 emergency_halt_loop:
000432 d247                      	rcall strobe_flash					; make strobe light flash
000433 d1d1                      	rcall show_floor					; show floor
000434 d257                      	rcall scan							; scan keypad
000435 e24a                      	ldi temp1, '*'
000436 16a4                      	cp ret1, temp1
000437 f429                      	brne continue_e_halt
000438 934f
000439 2d4d
00043a 7b4f
00043b 2ed4
00043c 914f                      	clear_register_bit emergency
                                 continue_e_halt:	
00043d 934f
00043e 2d4d
00043f 7440
000440 3440
000441 914f                      	check_register_bit emergency
000442 f409                      	brne restore_floor					; restore to original floor when emergency is over
000443 cfee                      	rjmp emergency_halt_loop			; keep running emergency until asterisk pressed again
                                 
                                 restore_floor:
000444 9230 020d
000446 9230 020e                 	clear Seconds						; write message to show returning to floor
000448 e041
000449 d10d
00044a d11c                      	clear_disp
00044b 934f
00044c e542
00044d d110
00044e d118
00044f 914f                      	write 'R'
000450 934f
000451 e445
000452 d10b
000453 d113
000454 914f                      	write 'E'
000455 934f
000456 e544
000457 d106
000458 d10e
000459 914f                      	write 'T'
00045a 934f
00045b e545
00045c d101
00045d d109
00045e 914f                      	write 'U'
00045f 934f
000460 e542
000461 d0fc
000462 d104
000463 914f                      	write 'R'
000464 934f
000465 e44e
000466 d0f7
000467 d0ff
000468 914f                      	write 'N'
000469 934f
00046a e449
00046b d0f2
00046c d0fa
00046d 914f                      	write 'I'
00046e 934f
00046f e44e
000470 d0ed
000471 d0f5
000472 914f                      	write 'N'
000473 934f
000474 e447
000475 d0e8
000476 d0f0
000477 914f                      	write 'G'
                                 
000478 934f
000479 935f
00047a e042
00047b 3042
00047c f039
00047d e850
00047e 6050
00047f 2f45
000480 d0d6
000481 d0e5
000482 940c 0489
000484 ec50
000485 6050
000486 2f45
000487 d0cf
000488 d0de
000489 915f
00048a 914f                      	change_line 2,0
00048b 934f
00048c e544
00048d d0d0
00048e d0d8
00048f 914f                      	write 'T'
000490 934f
000491 e44f
000492 d0cb
000493 d0d3
000494 914f                      	write 'O'
000495 934f
000496 e240
000497 d0c6
000498 d0ce
000499 914f                      	write ' '
00049a 934f
00049b e446
00049c d0c1
00049d d0c9
00049e 914f                      	write 'F'
00049f 934f
0004a0 e44c
0004a1 d0bc
0004a2 d0c4
0004a3 914f                      	write 'L'
0004a4 934f
0004a5 e44f
0004a6 d0b7
0004a7 d0bf
0004a8 914f                      	write 'O'
0004a9 934f
0004aa e44f
0004ab d0b2
0004ac d0ba
0004ad 914f                      	write 'O'
0004ae 934f
0004af e542
0004b0 d0ad
0004b1 d0b5
0004b2 914f                      	write 'R'
0004b3 934f
0004b4 e240
0004b5 d0a8
0004b6 d0b0
0004b7 914f                      	write ' '
0004b8 2d6e                      	mov arg1, old_floor					; move old_floor to arg 1
0004b9 d163                      	rcall convert_to_ascii				; and call convert to show floor
                                 
0004ba 9811                      	lcd_clr 1
                                 
                                 restore_floor_loop:
0004bb d149                      	rcall show_floor					; show floor
0004bc 150e                      	cp current_floor, old_floor			; check if old floor has been reached
0004bd f061                      	breq restore_floor_end				; jump to end if it has
0004be 9180 020d                 	lds r24, Seconds
0004c0 9190 020e                 	lds r25, Seconds+1
0004c2 3184                      	cpi r24, 20							; wait 2 seconds between each floor
0004c3 f3bc                      	brlt restore_floor_loop				; jump to top of loop if not 2 seconds yet
0004c4 9503                      	inc current_floor					; move up one floor after 2 seconds
0004c5 9230 020d
0004c7 9230 020e                 	clear Seconds						; reset timer to count 2 seconds again
0004c9 cff1                      	rjmp restore_floor_loop
                                 
                                 restore_floor_end:
                                 ;epilogue
0004ca e041
0004cb d08b
0004cc d09a                      	clear_disp							; write normal message of current and next floors
0004cd 934f
0004ce e443
0004cf d08e
0004d0 d096
0004d1 914f                      	write 'C'	
0004d2 934f
0004d3 e745
0004d4 d089
0004d5 d091
0004d6 914f                      	write 'u'							
0004d7 934f
0004d8 e742
0004d9 d084
0004da d08c
0004db 914f                      	write 'r'
0004dc 934f
0004dd e742
0004de d07f
0004df d087
0004e0 914f                      	write 'r'
0004e1 934f
0004e2 e645
0004e3 d07a
0004e4 d082
0004e5 914f                      	write 'e'
0004e6 934f
0004e7 e64e
0004e8 d075
0004e9 d07d
0004ea 914f                      	write 'n'
0004eb 934f
0004ec e744
0004ed d070
0004ee d078
0004ef 914f                      	write 't'							
0004f0 934f
0004f1 e240
0004f2 d06b
0004f3 d073
0004f4 914f                      	write ' '
0004f5 934f
0004f6 e646
0004f7 d066
0004f8 d06e
0004f9 914f                      	write 'f'
0004fa 934f
0004fb e64c
0004fc d061
0004fd d069
0004fe 914f                      	write 'l'
0004ff 934f
000500 e64f
000501 d05c
000502 d064
000503 914f                      	write 'o'
000504 934f
000505 e64f
000506 d057
000507 d05f
000508 914f                      	write 'o'
000509 934f
00050a e742
00050b d052
00050c d05a
00050d 914f                      	write 'r'							
00050e 9811                      	lcd_clr 1
                                 
00050f 934f
000510 935f
000511 e042
000512 3042
000513 f039
000514 e850
000515 6050
000516 2f45
000517 d03f
000518 d04e
000519 940c 0520
00051b ec50
00051c 6050
00051d 2f45
00051e d038
00051f d047
000520 915f
000521 914f                      	change_line 2, 0
                                 	
000522 934f
000523 e44e
000524 d039
000525 d041
000526 914f                      	write 'N'
000527 934f
000528 e645
000529 d034
00052a d03c
00052b 914f                      	write 'e'							
00052c 934f
00052d e748
00052e d02f
00052f d037
000530 914f                      	write 'x'
000531 934f
000532 e744
000533 d02a
000534 d032
000535 914f                      	write 't'
000536 934f
000537 e240
000538 d025
000539 d02d
00053a 914f                      	write ' '							
00053b 934f
00053c e743
00053d d020
00053e d028
00053f 914f                      	write 's'
000540 934f
000541 e744
000542 d01b
000543 d023
000544 914f                      	write 't'
000545 934f
000546 e64f
000547 d016
000548 d01e
000549 914f                      	write 'o'
00054a 934f
00054b e740
00054c d011
00054d d019
00054e 914f                      	write 'p'							
                                 	
00054f 919f                      	pop r25								; pop registers used in function
000550 918f                      	pop r24
000551 910f                      	pop current_floor
000552 90ef                      	pop old_floor
                                 
                                 /*	pop temp1
                                 	sts Seconds+1, temp1
                                 
                                 	pop temp1
                                 	sts Seconds, temp1
                                 	
                                 	pop temp1
                                 	sts Count+1, temp1
                                  	
                                 	pop temp1
                                 	sts Count, temp1*/
                                 
000553 914f                      	pop temp1
000554 bf4f                      	out SREG, temp1
                                 
000555 914f                      	pop temp1
                                 	
000556 9508                      	ret
                                 
                                 	
                                 // ---------------------------------------- EMERGENCY FUNCTION /\
                                 
                                 
                                 // ---------------------------------------- LCD_FUNCTIONS \/
                                 lcd_command:
000557 bb41                          out PORTF, temp1
000558 d01f                          rcall sleep_1ms
000559 9a16                          lcd_set LCD_E
00055a d01d                          rcall sleep_1ms
00055b 9816                          lcd_clr LCD_E
00055c d01b                          rcall sleep_1ms
00055d 9508                          ret
                                 
                                 lcd_data:
00055e bb41                          out PORTF, temp1
00055f 9a17                          lcd_set LCD_RS
000560 d017                          rcall sleep_1ms
000561 9a16                          lcd_set LCD_E
000562 d015                          rcall sleep_1ms
000563 9816                          lcd_clr LCD_E
000564 d013                          rcall sleep_1ms
000565 9817                          lcd_clr LCD_RS
000566 9508                          ret
                                 
                                 lcd_wait:
000567 930f                          push r16
000568 2700                          clr r16
000569 bb00                          out DDRF, r16
00056a bb01                          out PORTF, r16
00056b 9a15                          lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
00056c d00b                          rcall sleep_1ms
00056d 9a16                          lcd_set LCD_E
00056e d009                          rcall sleep_1ms
00056f b10f                          in r16, PINF
000570 9816                          lcd_clr LCD_E
000571 fd07                          sbrc r16, 7
000572 cff9                          rjmp lcd_wait_loop
000573 9815                          lcd_clr LCD_RW
000574 ef0f                          ser r16
000575 bb00                          out DDRF, r16
000576 910f                          pop r16
000577 9508                          ret
                                 
                                 .equ F_CPU = 160000		;edited from 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
000578 938f                          push r24
000579 939f                          push r25
00057a e090                          ldi r25, high(DELAY_1MS)
00057b e284                          ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
00057c 9701                          sbiw r25:r24, 1	 ; DEBUGGING ~~~~~~~~~~~~~~~~~
00057d f7f1                          brne delayloop_1ms
00057e 919f                          pop r25
00057f 918f                          pop r24
000580 9508                          ret
                                 
                                 sleep_5ms:
000581 dff6                          rcall sleep_1ms
000582 dff5                          rcall sleep_1ms
000583 dff4                          rcall sleep_1ms
000584 dff3                          rcall sleep_1ms
000585 dff2                          rcall sleep_1ms
000586 9508                          ret
                                 
                                 pause:
000587 dff9                      	rcall sleep_5ms
000588 dff8                      	rcall sleep_5ms
000589 dff7                      	rcall sleep_5ms
00058a dff6                      	rcall sleep_5ms
00058b dff5                      	rcall sleep_5ms
00058c dff4                      	rcall sleep_5ms
00058d dff3                      	rcall sleep_5ms
00058e dff2                      	rcall sleep_5ms
00058f dff1                      	rcall sleep_5ms
000590 dff0                      	rcall sleep_5ms
000591 9518                      	reti
                                 
                                 // ---------------------------------------- LCD_FUNCTIONS
                                 
                                 // ---------------------------------------- FUNCTIONS
                                 
                                 
                                 //INSERT_REQUEST
                                 
                                 insert_request:
                                 ;prologue
000592 935f                      push temp2
000593 b75f                      in temp2 , SREG		; push SREG so as to not change it in the function
000594 935f                      push temp2
                                 
000595 927f                      push counter
000596 930f                      push r16	; r16 current_floor global
000597 931f                      push r17	; r17 requested_floor return value
000598 932f                      push r18    ; parameter input_value
000599 933f                      push r19	; r19 lift_status global
00059a 934f                      push r20    ; temp1
00059b 936f                      push r22
00059c 936f                      push arg1
00059d 937f                      push arg2
                                 
00059e 93af                      push XL
00059f 93bf                      push XH
                                 
0005a0 e0a1                      ldi XL, low(Queue)							; load queue
0005a1 e0b2                      ldi XH, high(Queue)
0005a2 9160 0200                 lds r22, Queue_len
                                 
0005a4 24aa                      clr ret1
                                 
0005a5 302b                      cpi input_value, 11							; used just in case a number greater than 10 is in input_value somehow
0005a6 f014                      brlt under_11
0005a7 940c 05f4                 jmp end_insert_loop							; if its greater than 11, jump to end_insert
                                 
                                 under_11:
0005a9 3021                      cpi input_value, 1							; if the input value is greater than or equal to 0,
0005aa f414                      brge valid_insert							; then it is a valid_insert
0005ab 940c 05f4                 jmp end_insert_loop							; else jump to end
                                 
                                 valid_insert:
0005ad 2477                      clr counter									; counter = 0
0005ae 9160 0200                 lds r22, Queue_len							; load queue length
0005b0 1702                      cp current_floor, input_value				; if the current floor is the input floor, break to end
0005b1 f411                      brne input_continue							; else continue
0005b2 940c 05f4                 jmp end_insert_loop
                                 
                                 input_continue:
0005b4 2ea2                      mov ret1, input_value						; move the input value into the return register
                                 
0005b5 934f
0005b6 2d4d
0005b7 7042
0005b8 3042
0005b9 914f                      check_register_bit goingUp					; check the goingUp bit
0005ba f009                      breq up_search								; if 1, sort up
0005bb c018                      rjmp down_search 							; else sort down
                                 
                                 
                                 
                                 ; r7 counter // r22 len
                                 
                                 up_search:
0005bc 1720                          cp input_value, current_floor   		; if input floor < current floor, jump to up_descending_loop, else up_ascending_loop
0005bd f05c                          brlt up_descending_loop
                                 up_ascending_loop:
0005be 1676                          cp counter, r22   						; compare counter to len (check if end of list reached)
0005bf f159                          breq end_search
0005c0 914c                          ld temp1, X   							; load floor from output array
0005c1 1724                          cp input_value, temp1   				; check if input floor already exists
0005c2 f081                          breq jumping_to_end_insert				; quit if it does
0005c3 f140                          brlo insert_start						; if input floor lower than ith floor, insert
0005c4 1740                          cp temp1, current_floor   				; compare ith floor to current floor
0005c5 f130                          brlo insert_start						; if ith < current, insert
0005c6 9611                          adiw X, 1   							; increment output array
0005c7 9473                          inc counter   							; increment counter
0005c8 cff5                          rjmp up_ascending_loop
                                 
                                 up_descending_loop:
0005c9 1676                          cp counter, r22   						; compare counter to len (check if end of list reached)
0005ca f101                          breq end_search   	 
0005cb 914c                          ld temp1, X   							; load floor from output array
0005cc 1724                          cp input_value, temp1   				; check if input floor already exists
0005cd f131                          breq end_insert_loop					; quit if it does
0005ce 1740                          cp temp1, current_floor   				; compare ith floor to current floor
0005cf f020                          brlo down_search						; if input floor < current floor and ith floor < current floor jmp to down search
0005d0 9611                          adiw X, 1   							; increment output array
0005d1 9473                          inc counter   							; increment counter
0005d2 cff6                          rjmp up_descending_loop
                                 
                                 jumping_to_end_insert:
0005d3 c020                      	rjmp end_insert_loop
                                 
                                 down_search:
0005d4 1702                          cp current_floor, input_value   		; compare current floor < input floor
0005d5 f05c                          brlt down_ascending_loop
                                 down_descending_loop:
0005d6 1676                          cp counter, r22   						; compare counter to len (check if end of list reached)
0005d7 f099                          breq end_search   	 
0005d8 914c                          ld temp1, X   							; load floor from output array
0005d9 1742                          cp temp1, input_value   				; check if input floor already exists
0005da f0c9                          breq end_insert_loop					; quit if it does
0005db f080                          brlo insert_start						; if current floor < input floor insert here
0005dc 1704                          cp current_floor, temp1   				; compare current floor to ith floor
0005dd f070                          brlo insert_start    
0005de 9611                          adiw X, 1   							; increment output array
0005df 9473                          inc counter   							; increment counter
0005e0 cff5                          rjmp down_descending_loop
                                 
                                 down_ascending_loop:
0005e1 1676                          cp counter, r22   						; compare counter to len (check if end of list reached)
0005e2 f041                          breq end_search   	 
0005e3 914c                          ld temp1, X   							; load floor from output array
0005e4 1742                          cp temp1, input_value   				; check if input floor already exists
0005e5 f071                          breq end_insert_loop					; quit if it does
0005e6 1704                          cp current_floor, temp1   				; compare ith floor to current floor
0005e7 f2a0                          brlo up_search   						; if ith floor > current and input floor > current floor, jmp to upsearch
0005e8 9611                          adiw X, 1   							; increment output array
0005e9 9473                          inc counter   							; increment counter
0005ea cff6                          rjmp down_ascending_loop
                                 
                                 end_search:
0005eb c000                          rjmp insert_start
                                 
                                 insert_start:    
0005ec 9563                          inc r22    ;len++   					;length of list is now longer
                                 
                                 
                                 
                                 insert_loop:
0005ed 1567                          cp r22, counter   						; comparison of index and list length to check if the end of the list has been reached
0005ee f029                          breq end_insert_loop    
0005ef 914c                          ld temp1, X								; load address of queue
0005f0 932d                      	st X+, input_value						; store the value into the queue
0005f1 2f24                          mov input_value, temp1					;
0005f2 9473                          inc counter
0005f3 cff9                          rjmp insert_loop
                                 
                                 end_insert_loop:
                                 
0005f4 9360 0200                     sts Queue_len, r22   					; store new length back in memory
                                 
                                     ;epilogue
0005f6 91bf                          pop XH									; pop registers that were used in the function
0005f7 91af                          pop XL
0005f8 917f                      	pop arg2
0005f9 916f                      	pop arg1
0005fa 916f                          pop r22
0005fb 914f                          pop r20
0005fc 913f                      	pop r19
0005fd 912f                          pop r18
0005fe 911f                      	pop r17
0005ff 910f                      	pop r16
000600 907f                          pop counter
000601 915f                          pop temp2
000602 bf5f                          out SREG, temp2
000603 915f                          pop temp2
000604 9508                          ret
                                 
                                 
                                 //SHOW_FLOOR:
                                 
                                 show_floor:
                                 ;prologue
000605 930f                          push current_floor			; push registers being used
000606 927f                          push counter
000607 93af                      	push XL		
000608 93bf                      	push XH
                                 
000609 2477                          clr counter    
00060a 27aa                          clr XL    ; output
00060b 27bb                          clr XH
                                 
                                 loop:
00060c 1670                          cp counter, current_floor	; check if counter is equal to current floor
00060d f041                          breq end_show_floor
00060e 0faa                          lsl XL						; left shift XL and then increment to show floor
00060f 95a3                          inc XL						; |_|_|_|_|_|_|_|_| -> lsl, inc -> |_|_|_|_|_|_|_|*|
000610 f008                          brcs grtr8					; |_|_|_|_|_|_|_|*| -> lsl -> |_|_|_|_|_|_|*|_| -> inc -> |_|_|_|_|_|_|*|*| etc.
000611 c002                          rjmp end_x					; if there is a carry, that means all 8 bits of XL are filled, meaning number is bigger than 8
                                 grtr8:
000612 0fbb                          lsl XH						; lsl XH for higher bit of LED to show numbers bigger than 8
000613 95b3                          inc XH						; |_|_|_|_|_|_|_|*| - |*|*|*|*|*|*|*|*| (9)
                                 end_x:    
000614 9473                          inc counter					; increment counter
000615 cff6                          rjmp loop
                                 
                                 
                                 ; epilogue
                                 end_show_floor:
000616 bbb4                          out PORTG, XH				; push the higher part of the LEDs to PORTG (highest two LEDs)
000617 b9a8                          out PORTC, XL				; push lower part of LEDs to PORTC (bottom 8 LEDs)
                                 								
000618 91bf                      	pop XH						; pop registers that have been used
000619 91af                      	pop XL
00061a 907f                      	pop counter
00061b 910f                      	pop current_floor
                                 	
00061c 9508                      	ret
                                 
                                 // CONVERT_TO_ASCII
                                 
                                 convert_to_ascii:
                                 	; prologue
00061d 927f                      	push r7					; register used to write digit
00061e 928f                      	push r8					; ???
00061f 929f                      	push r9					; ???
000620 930f                      	push r16				; divisor-low
000621 931f                      	push r17				; divisor-high
000622 932f                      	push r18				; dividend-low
000623 933f                      	push r19				; dividend-high
000624 934f                      	push r20				; used to store ascii value of zero
000625 936f                      	push arg1				; arg1 and arg2 store the value
000626 937f                      	push arg2				; that is being converted to ascii
000627 938f                      	push r24				; quotient-low
000628 939f                      	push r25				; quotient-high
000629 93ef                      	push ZL					; Word Z is used to load
00062a 93ff                      	push ZH					; the divisors from memory
                                 
00062b 2777                      	clr arg2 ; THIS IS ONLY FOR WHEN NUMBERS LESS THAN 255
                                 
                                 start:
00062c e6e0                      	ldi ZL, low(divisors<<1)
00062d e0f0                      	ldi ZH, high(divisors<<1)
00062e e340                      	ldi r20, 0x30			; ascii value for zero
00062f 2488                      	clr r8
000630 2499                      	clr r9
                                 convert_loop:
000631 e052                      	ldi temp2, 2
000632 1695                      	cp r9, temp2
000633 f119                      	breq end_convert
000634 c000                      	rjmp divide
                                 
                                 	; r19:r18 hold the dividend (numerator)
                                 divide:
000635 9105                          lpm r16, Z+				; divisor (denominator)
000636 9115                      	lpm r17, Z+				; ^^^
000637 e080                      	ldi r24, 0				; quotient
000638 e090                      	ldi r25, 0				; ^^^
                                 loop_start:
000639 3000                      	cpi r16, 0				; not dividing by zero
00063a f041                      	breq end_divide
00063b 1760                      	cp arg1, r16			; check dividend !< divisor i.e. you can still minus
00063c 0771                      	cpc arg2, r17
00063d f020                      	brlo end_loop 
00063e 1b60                      	sub arg1, r16			; dividend = dividend - divisor 
00063f 0b71                      	sbc arg2, r17
000640 9601                      	adiw r25:r24, 1			; quotient++	
000641 cff7                          rjmp loop_start
                                 end_loop:
000642 019b                      	movw r19:r18, arg2:arg1
                                 end_divide:
                                 	
                                 	; r23:r22 holds the remainder, r25:r24 holds the quotient
                                 
000643 01b9                      	movw arg2:arg1, r19:r18 ; the remainder moves to the dividend to be divided again
000644 9493                      	inc r9
000645 3080                      	cpi r24, 0
                                 	; breq check_zero
000646 2e74                      	mov r7, r20				; r7 holds ASCII val for '0'
000647 0e78                      	add r7, r24				; r7 holds ASCII val for '0' + remainder
                                 
                                 
                                 
000648 934f
000649 2d47
00064a df13
00064b df1b
00064c 914f                      	write_reg r7			; write r7 to LCD
00064d 9483                      	inc r8
00064e cfe2                      	rjmp convert_loop
                                 check_zero:
00064f 1483                      	cp r8, zero				; if r8 = 0, then nothing has been written to LCD yet
000650 f301                      	breq convert_loop		; if it has been written, then write 0, eg for "10"
000651 934f
000652 e340
000653 df0a
000654 df12
000655 914f                      	write '0'
                                 
000656 cfda                      	rjmp convert_loop
                                 
                                 
                                 
                                 end_convert:
                                 ;epilogue
000657 91ff                      	pop ZH		; pop registers used in function
000658 91ef                      	pop ZL
000659 919f                      	pop r25
00065a 918f                      	pop r24
00065b 917f                      	pop arg2
00065c 916f                      	pop arg1
00065d 914f                      	pop r20
00065e 913f                      	pop r19
00065f 912f                      	pop r18
000660 911f                      	pop r17
000661 910f                      	pop r16
000662 909f                      	pop r9
000663 908f                      	pop r8
000664 907f                      	pop r7
000665 9508                      	ret
                                 
                                 
                                 
                                 //FLASH_LED
                                 
                                 LED_flash:
000666 934f                      	push temp1						; push registers that are being used in	the function
000667 b74f                      	in temp1, SREG					; put SREG into temp1 to make sure SREG isnt changed when this function is called
000668 934f                      	push temp1
000669 930f                      	push current_floor	
                                 	
00066a 934f
00066b 2d4d
00066c 7240
00066d 3240
00066e 914f                      	check_register_bit flashing		; check the flashing bit
00066f f009                      	breq LED_up						; if the bit is 1, then go to LED_up
000670 c002                      	rjmp LED_down					; if the bit is 0, then go to LED_down
                                 
                                 LED_up:
000671 df93                      	rcall show_floor				; show floor as is if bit is 1
000672 c002                      	rjmp LED_END
                                 LED_down:
000673 950a                      	dec current_floor				; decrement the current floor if bit is 0, THEN call show floor
000674 df90                      	rcall show_floor
                                 									; this creates the effect that the LED is flashing by alternatively showing the (floor)
                                 									; and the (floor-1), e.g:
                                 LED_end:							; |*|*|*|*|*|_|_|_|_|_|
000675 910f                      	pop current_floor				; |*|*|*|*|_|_|_|_|_|_|
000676 914f                      	pop temp1						; |*|*|*|*|*|_|_|_|_|_|
000677 bf4f                      	out SREG, temp1					; |*|*|*|*|_|_|_|_|_|_|
000678 914f                      	pop temp1						; |*|*|*|*|*|_|_|_|_|_|
000679 9508                      	ret
                                 
                                 
                                 
                                 //STROBE_FLASH
                                 Strobe_flash:	//Reads in the seconds value in X
00067a 934f                      	push temp1
00067b b74f                      	in temp1, SREG
00067c 934f                      	push temp1
00067d 934f
00067e 2d4d
00067f 7240
000680 3240
000681 914f                      	check_register_bit flashing
000682 f009                      	breq strobe_on	
000683 c002                      	rjmp strobe_off
                                 
                                 strobe_on:
000684 9a11                          lcd_set 1		//set PORTA bit to 1
000685 c002                      	rjmp strobe_end
                                 strobe_off:
000686 9811                          lcd_clr 1
000687 c000                      	rjmp strobe_end
                                 Strobe_end:
000688 914f                      	pop temp1
000689 bf4f                      	out SREG, temp1
00068a 914f                      	pop temp1
00068b 9508                      	ret
                                 
                                 
                                 //-----------------------------
                                 // |  C3   |  C2   |  C1   |  C0   |  R3   |  R2   |  R1   |  R0   |
                                 // |  PL0  |  PL1  |  PL2  |  PL3  |  PL4  |  PL5  |  PL6  |  PL7  |
                                 
                                 
                                 //SCAN						; return value in arg1
                                 scan:
                                 ;prologue
00068c 930f                          push r16				; row
00068d 931f                          push r17				; col
00068e 932f                          push r18				; rmask --- r18 will be used to return the input_value
00068f 933f                          push r19				; cmask
000690 934f                          push temp1
000691 935f                          push temp2 
000692 936f                          push arg1				; floor
000693 937f                          push arg2				; floor2
000694 ee3f                          ldi r19, INITCOLMASK   	; load column mask to scan a column
000695 2711                          clr r17
                                 
000696 24aa                      	clr ret1
                                 colloop:
000697 3014                          cpi r17, 4   			; check if all columns scanned
000698 f169                          breq scan_end   		; restart scan if all cols scanned
000699 9330 010b                     sts PORTL, r19   		; scan a column (sts used instead of out since PORTL is in extended I/O space)
00069b ef4f                          ldi temp1, 0xFF   		; slow down scan operation (???? WHY ????)
                                 
                                 delay:
00069c 954a                          dec temp1
00069d f7f1                          brne delay
                                 
00069e 9160 0109                     lds arg1, PINL   		; load current status of PORTL pins(lds must be used instead of in)
0006a0 706f                          andi arg1, ROWMASK   	; and the PINL register with row mask
0006a1 306f                          cpi arg1, 0xF   		; check if any row low
0006a2 f059                          breq nextcol   			; if temp is all 1s (i.e 0xF), then there are now lows
                                    							; if there is a low, find which row it is
0006a3 e021                          ldi r18, INITROWMASK   	; load Row mask
0006a4 2700                          clr r16
                                 
                                 rowloop:
0006a5 3004                          cpi r16, 4   			; if all rows scanned, jump to next column
0006a6 f039                          breq nextcol
0006a7 2f56                          mov temp2, arg1  			 
0006a8 2352                          and temp2, r18   		; mask the input with row mask
0006a9 f041                          breq show   			; if the bit is clear, a key has been pressed
                                    							; eg if a key in row 1 is pressed, temp2 = XXXX1101
                                    							; rmask should equal 00000010
                                    							; when AND is used, result is 00000000 -> button pressed
0006aa 9503                          inc r16   				; move to next row
0006ab 0f22                          lsl r18   				; left shift mask to check next row
0006ac 940c 06a5                     jmp rowloop
                                 
                                 nextcol:   					; jump to next column when row scan over
0006ae 0f33                          lsl r19   				; left shift mask to check next col
0006af 9513                          inc r17
0006b0 940c 0697                     jmp colloop
                                 
                                 show:
                                 	
0006b2 3013                          cpi r17, 3   			; if column = 3, a key in column 3 is pressed, which is a letter key
0006b3 f091                          breq scan_end   		; we dont need to deal with this for this lab, so go to n_a
                                 
0006b4 3003                          cpi r16, 3   			; if row = 3, a key in row 3 has been pressed, which is any special character or 0
0006b5 f039                          breq check_bottom_row	; zero is the only key we are worried about, so go to check_zero
                                 	
0006b6 2f60                      	mov arg1, r16			; move row to floor
0006b7 0f66                      	lsl arg1				; multiply by 2
0006b8 0f60                      	add arg1, r16			; add row again, to multiply row by 3
0006b9 0f61                      	add arg1, r17			; add col
0006ba 5f6f                      	subi arg1, -1			; add 1
0006bb 940c 06c5                 	jmp end_show
                                 
                                 check_bottom_row:
0006bd 3010                      	cpi r17, 0				; if column = 0, asterisk is pressed
0006be f029                      	breq asterisk
                                 
0006bf 3011                      	cpi r17, 1				; if column = 1, 0 is pressed
0006c0 e06a                      	ldi arg1, 10			; therefore floor 10 has been selected
0006c1 f019                      	breq end_show			
                                 
0006c2 940c 06c6                 	jmp scan_end
                                 
                                 asterisk:
0006c4 e26a                      	ldi arg1, '*'			; move asterisk into arg1 to be returned to main
                                 
                                 	
                                 end_show:
                                 
0006c5 2ea6                      	mov ret1, arg1			; move arg1 into ret1 to be returned
                                 
                                 
                                 scan_end:
                                 ;epilogue
0006c6 917f                      	pop arg2				; pop used registers
0006c7 916f                      	pop arg1
0006c8 915f                      	pop temp2
0006c9 914f                      	pop temp1
0006ca 913f                      	pop r19
0006cb 912f                      	pop r18
0006cc 911f                      	pop r17
0006cd 910f                      	pop r16
                                 
0006ce 9508                      	ret
                                 																		
                                 //FUNCTION shuffle_queue
                                 
                                 shuffle_queue:
0006cf 93ef                      	push ZL
0006d0 93ff                      	push ZH
0006d1 934f                      	push temp1
0006d2 935f                      	push temp2
0006d3 936f                      	push arg1
0006d4 937f                      	push arg2
0006d5 927f                      	push counter
                                 	
0006d6 e0e1                      	ldi ZL, low(Queue)
0006d7 e0f2                      	ldi ZH, high(Queue)
                                 
0006d8 9140 0200                 	lds temp1, Queue_len
0006da 0fe4                      	add ZL, temp1
0006db 1df3                      	adc ZH, zero
                                 
0006dc 9731                      	sbiw Z, 1
0006dd 2477                      	clr counter
0006de 2766                      	clr arg1
                                 shuffle_loop:
                                 	//Z points to the end of the queue
0006df 9140 0200                 	lds temp1, Queue_len
0006e1 1674                      	cp counter, temp1
0006e2 f031                      	breq shuffle_loop_end
0006e3 8170                      	ld arg2, Z
0006e4 8360                      	st Z, arg1
0006e5 2f67                      	mov arg1, arg2
0006e6 9473                      	inc counter
0006e7 9731                      	sbiw Z, 1
0006e8 cff6                      	rjmp shuffle_loop
                                 shuffle_loop_end:
0006e9 9140 0200                 	lds temp1, Queue_len
0006eb 954a                      	dec temp1
0006ec 9340 0200                 	sts Queue_len, temp1
                                 
                                 
0006ee 907f                      	pop counter
0006ef 917f                      	pop arg2
0006f0 916f                      	pop arg1
0006f1 915f                      	pop temp2
0006f2 914f                      	pop temp1
0006f3 91ff                      	pop ZH	
0006f4 91ef                       	pop ZL
                                 
0006f5 9508                      	ret
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :  10 y  :   0 z  :   6 r0 :   0 r1 :   0 r2 :   0 r3 :  38 r4 :   2 
r5 :   4 r6 :   0 r7 :  28 r8 :   5 r9 :   5 r10:  10 r11:   6 r12:   8 
r13:  87 r14:   5 r15:   0 r16:  52 r17:  20 r18:  25 r19:  11 r20: 770 
r21:  63 r22:  42 r23:  15 r24:  42 r25:  29 r26:  11 r27:  11 r28:   0 
r29:   0 r30:   7 r31:   7 
Registers used: 27 out of 35 (77.1%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   4 adiw  :   7 and   :   1 
andi  :  22 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :  50 brge  :  11 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 brlt  :   7 brmi  :   0 
brne  :  16 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   9 cbr   :  21 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  35 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  32 cpc   :   2 
cpi   :  53 cpse  :   2 dec   :   5 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :  20 jmp   :  22 ld    :   6 ldd   :   0 ldi   : 166 
lds   :  33 lpm   :   2 lsl   :   5 lsr   :   0 mov   : 117 movw  :   2 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :  15 out   :  27 pop   : 225 push  : 225 rcall : 267 ret   :  13 
reti  :   5 rjmp  :  60 rol   :   0 ror   :   0 sbc   :   1 sbci  :   0 
sbi   :   7 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :  12 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :  73 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 48 out of 116 (41.4%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000dec   3484      4   3488  262144   1.3%
[.dseg] 0x000200 0x00020f      0     15     15    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
