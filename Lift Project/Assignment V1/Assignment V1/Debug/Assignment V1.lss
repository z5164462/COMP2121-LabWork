
AVRASM ver. 2.2.7  C:\Users\andre\OneDrive - UNSW\University\COMP2121- CURRENT\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm Sat Apr 27 22:53:34 2019

[builtin](2): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\andre\OneDrive - UNSW\University\COMP2121- CURRENT\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm(20): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
[builtin](2): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
C:\Users\andre\OneDrive - UNSW\University\COMP2121- CURRENT\COMP2121-LabWork\Lift Project\Assignment V1\Assignment V1\main.asm(20): Including file 'D:/Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m2560def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Assignment V1.asm
                                 ;
                                 ; Created: 31/03/2019 9:58:14 AM
                                 ; Author : andrew fleming z5164462 anirudh ramia z5164466
                                 ;
                                 
                                 /*Assumptions !!!!
                                 
                                 The Emergency call cannot be cancelled until the lift reaches the first floor
                                 and has completed the opening and closing routinues
                                 
                                 Any button press length is counted as a hold for the hold open doors duration
                                 */
                                 
                                 
                                 ; Replace with your application code
                                 
                                 ;initial definitions and assignments
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .dseg
                                 Queue_len:
000200                               .byte 1
                                 Queue:
000201                           	.byte 10
                                 Count:
00020b                               .byte 2
                                 Seconds:
00020d                               .byte 2
                                 Wait_duration:
00020f                               .byte 2
                                 /*Flash_wait:
                                     .byte 2*/
                                 
                                 /*
                                 input_array?
                                 floor_array?
                                 */
                                 
                                 //REGISTER_DEFINITIONS
                                 .cseg
                                 
                                 
                                 .def zero = r3
                                 .def one = r4
                                 .def flip_flash = r5
                                 .def counter = r7
                                 .def ret1 = r10
                                 .def debounce1 = r11
                                 .def debounce2 = r12
                                 .def lift_status = r13
                                 .def old_floor = r14 
                                 .def current_floor = r16
                                 .def requested_floor = r17
                                 .def input_value = r18
                                 
                                 .def temp1 = r20
                                 .def temp2 = r21 //NOTE: temp1 and temp2 will not reliably hold the data given to them
                                 .def arg1 = r22
                                 .def arg2 = r23
                                 
                                 
                                 /*
                                 lift_status is a status register with the bits as flags
                                 b0 = Stopped?
                                 b1 = Going up?
                                 b2 = Doors Open?
                                 b3 = Doors Opening?
                                 b4 = Doors Closing?
                                 b5 = Flash on?
                                 b6 = Emergency?
                                 b7 = Held?
                                 */
                                 .equ stopped =   		0b00000001    // is lift stopped?
                                 .equ goingUp =   		0b00000010    // is lift going up?
                                 .equ doorsOpen =		0b00000100    // are the doors open?
                                 .equ opening =   		0b00001000    // are the doors opening?
                                 .equ closing =   		0b00010000    // are the doors closing? if no to open, opening and closing, they closed
                                 .equ flashing =   		0b00100000  // is the LED bar flashing
                                 .equ emergency =		0b01000000    // is there an emergency
                                 .equ held =   			0b10000000    // is the lift held
                                 
                                 //LCD interface constants
                                 .equ PORTLDIR = 0xF0   		 ; 0xF0 = 0b11110000 -> Setting PORTA 7:4 as output and 3:0 as input
                                 .equ INITCOLMASK = 0XEF   		 ; 0xEF = 0b11101111 -> Mask to decide which column is selected
                                 .equ INITROWMASK = 0x01   		 ; 0x01 = 0b00000001 -> Mask to check which row is selected
                                 .equ ROWMASK = 0x0F   			 ; 0x0F = 0b00001111 -> To get keyboard output value using an AND operation
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 .equ l_one = 0b10000000
                                 .equ l_two = 0b11000000
                                 
                                 //clock and flash constants
                                 
                                 .equ clock_speed = 781
                                 .equ wait_speed = 1
                                 
                                 
                                 
                                 
                                 
                                 //Flag checking register  usage check_register_bit stopped
                                 //   							 breq action
                                 .macro check_register_bit
                                 	push temp1
                                     mov temp1, lift_status
                                     andi temp1, @0
                                     cpi temp1, @0
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro clear_register_bit
                                 	push temp1
                                     mov temp1, lift_status
                                 	cbr temp1, @0
                                 	mov lift_status, temp1
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro set_register_bit
                                 	push temp1
                                     mov temp1, lift_status
                                 	sbr temp1, @0
                                 	mov lift_status, temp1
                                 	pop temp1
                                 .endmacro
                                 
                                 
                                 //Clear word macro
                                 .macro clear
                                     sts @0, zero
                                     sts @0+1, zero
                                 .endmacro
                                 
                                 //LCD MACROS
                                 .macro do_lcd_command   					 // LCD commands
                                     ldi temp1, @0
                                     rcall lcd_command
                                     rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_command_reg   				 // LCD commands, with registers
                                     mov temp1, @0
                                     rcall lcd_command
                                     rcall lcd_wait
                                 .endmacro
                                 
                                 .macro change_line   						 // change line and cursor position on line
                                 	push temp1
                                 	push temp2
                                     ldi temp1, @0
                                     cpi temp1, 2
                                     breq line_two
                                     ldi temp2, l_one
                                     ori temp2, @1
                                     do_lcd_command_reg temp2
                                     jmp end_cl
                                 line_two:
                                     ldi temp2, l_two
                                     ori temp2, @1
                                     do_lcd_command_reg temp2
                                 end_cl:
                                 	pop temp2
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro write   							 // write immediate data to LCD screen
                                     push temp1
                                 	ldi temp1, @0
                                     rcall lcd_data
                                     rcall lcd_wait
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro write_reg   						 // write register data to LCD screen
                                     push temp1
                                 	mov temp1, @0
                                     rcall lcd_data
                                     rcall lcd_wait
                                 	pop temp1
                                 .endmacro
                                 
                                 .macro clear_disp   						 // clear the LCD Display
                                     do_lcd_command 0b00000001
                                 .endmacro
                                 
                                 .macro lcd_set   							 // set bit in PORTA
                                     sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr   							 // clear bit in PORTA
                                     cbi PORTA, @0
                                 .endmacro
                                 .macro set_motor_speed
                                 	push temp1
                                 	ldi temp1, @0
                                 	sts OCR3BL, temp1
                                 	clr temp1
                                 	sts OCR3BH, temp1	
                                 	pop temp1
                                 .endmacro
                                 
                                 
                                 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
                                 // INTERRUPTS
                                 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
                                 
                                 //-----------------------------
                                 // |  C3   |  C2   |  C1   |  C0   |  R3   |  R2   |  R1   |  R0   |
                                 // |  PL0  |  PL1  |  PL2  |  PL3  |  PL4  |  PL5  |  PL6  |  PL7  |
                                 
                                 
                                 .org 0x0000 ; reset adress
000000 940c 0032                     jmp RESET
                                 
                                 .org INT0addr
000002 940c 0157                     jmp EXT_INT0
                                 .org INT1addr
000004 940c 015f                     jmp EXT_INT1
                                 
                                 .org OVF0addr
00002e 940c 0179                     jmp Timer0OVF
                                 .org OVF1addr
000028 940c 019f                 	jmp Timer1OVF
                                 .org 0x30
                                 
                                 
                                 //CSEG MEMORY STORAGE
                                 
                                 /*requests:
                                    	 .db 3,2,6*/
                                 divisors:
000030 000a
000031 0001                      	 .dw  10, 1
                                 
                                 RESET:
000032 ef4f                          ldi temp1, low(RAMEND)    ; Init stack frame
000033 bf4d                          out SPL, temp1
000034 e241                          ldi temp1, high(RAMEND)
000035 bf4e                          out SPH, temp1
                                 
                                 
000036 934f
000037 2d4d
000038 7f4e
000039 2ed4
00003a 914f                      	clear_register_bit stopped	;0
00003b 934f
00003c 2d4d
00003d 6042
00003e 2ed4
00003f 914f                      	set_register_bit goingUp	;1
000040 934f
000041 2d4d
000042 7f4b
000043 2ed4
000044 914f                      	clear_register_bit doorsOpen	;0
000045 934f
000046 2d4d
000047 7f47
000048 2ed4
000049 914f                      	clear_register_bit opening	;0
00004a 934f
00004b 2d4d
00004c 7e4f
00004d 2ed4
00004e 914f                      	clear_register_bit closing	;0
00004f 934f
000050 2d4d
000051 7d4f
000052 2ed4
000053 914f                      	clear_register_bit flashing	;0
000054 934f
000055 2d4d
000056 7b4f
000057 2ed4
000058 914f                      	clear_register_bit emergency	;0
000059 934f
00005a 2d4d
00005b 774f
00005c 2ed4
00005d 914f                      	clear_register_bit held		;0
                                 
00005e e001                      	ldi current_floor, 1
                                 	
                                 
00005f 2433                          clr zero   			 ; zero
000060 2444                          clr one   				 
000061 9443                          inc one   				 ; one
000062 2455                      	clr flip_flash
000063 24aa                      	clr ret1
                                 
000064 ef4f                       	ser temp1
000065 2eb4                      	mov debounce1, temp1
000066 2ec4                      	mov debounce2, temp1
                                 
000067 9230 0200                 	sts Queue_len, zero
                                 
000069 ef40                          ldi temp1, PORTLDIR   	 ;p7-4 outputs, p3-0 inputs
00006a e05f                      	ldi temp2, 0b00001111;send 1 to p3-0 to activate pull up resistors
00006b 9340 010a                     sts DDRL, temp1
00006d 9340 010b                 	sts PORTL, temp1
                                 
00006f 0000                      	nop
                                  			 
                                 
000070 ef4f                      	ser temp1
000071 b947                          out DDRC, temp1   		 ;LED Lower
000072 bb43                          out DDRG, temp1   		 ;LED Higher
000073 2744                      	clr temp1
000074 b94a                          out DDRD, temp1   		 ;Buttons?
                                 /*    ldi temp1, 0b01010101    ;LED testing
                                     ldi temp2, 0
                                     out PORTC, temp1   	 ;LED lower
                                     out PORTG, temp2   	 ;LED higher*/
                                 
000075 e140                      	ldi temp1, 0b00010000
000076 b94d                      	out DDRE, temp1
                                 
000077 e24a                          ldi temp1, 0b00101010    ;falling edges for interrupts 2, 1 and 0
000078 9340 0069                     sts EICRA, temp1   	 
                                 
                                 
                                 
00007a b34d                          in temp1, EIMSK
00007b 6041                      	ori temp1, (1<<INT0)
00007c 6042                      	ori temp1, (1<<INT1)
00007d 6044                          ori temp1, (1<<INT2)
00007e bb4d                          out EIMSK, temp1
                                     
00007f e040                          ldi temp1, 0b00000000
000080 bd44                          out TCCR0A, temp1
000081 e042                          ldi temp1, 0b00000010
000082 bd45                          out TCCR0B, temp1
000083 e041                          ldi temp1, 1<<TOIE0
000084 9340 006e                     sts TIMSK0, temp1
                                 
000086 e040                      	ldi temp1, 0b00000000
000087 9340 0080                     sts TCCR1A, temp1
000089 e042                          ldi temp1, 0b00000010 //8 prescaler
00008a 9340 0081                     sts TCCR1B, temp1
00008c e241                          ldi temp1, 1<<TOIE1|1<<ICIE1
00008d 9340 006f                     sts TIMSK1, temp1
                                 
                                 
00008f e041                      	ldi temp1, (1<<CS30)
000090 9340 0091                 	sts TCCR3B, temp1
000092 e241                      	ldi temp1, (1<<COM3B1) | (1<<WGM30)
000093 9340 0090                 	sts TCCR3A, temp1
                                 	
                                 //from LCD-example LCD setup
000095 ef4f                          ser temp1
                                 
000096 bb40                          out DDRF, temp1
000097 b941                          out DDRA, temp1
                                 
000098 2744                          clr temp1
000099 bb41                          out PORTF, temp1
00009a b942                          out PORTA, temp1
                                 
                                 	
                                 
00009b e348
00009c d457
00009d d466                          do_lcd_command 0b00111000 ; 2x5x7
                                 
00009e d47f                          rcall sleep_5ms
00009f e348
0000a0 d453
0000a1 d462                          do_lcd_command 0b00111000 ; 2x5x7
0000a2 d472                      	rcall sleep_1ms
0000a3 e348
0000a4 d44f
0000a5 d45e                          do_lcd_command 0b00111000 ; 2x5x7
0000a6 e348
0000a7 d44c
0000a8 d45b                          do_lcd_command 0b00111000 ; 2x5x7
0000a9 e048
0000aa d449
0000ab d458                          do_lcd_command 0b00001000 ; display off?
0000ac e041
0000ad d446
0000ae d455                          do_lcd_command 0b00000001 ; clear display
0000af e046
0000b0 d443
0000b1 d452                          do_lcd_command 0b00000110 ; increment, no display shift
0000b2 e04e
0000b3 d440
0000b4 d44f                          do_lcd_command 0b00001110 ; Cursor on, bar, no blink
0000b5 9a11                      	lcd_set 1
0000b6 e041
0000b7 d43c
0000b8 d44b                      	clear_disp
0000b9 934f
0000ba e443
0000bb d43f
0000bc d447
0000bd 914f                      	write 'C'
0000be 934f
0000bf e745
0000c0 d43a
0000c1 d442
0000c2 914f                      	write 'u'
0000c3 934f
0000c4 e742
0000c5 d435
0000c6 d43d
0000c7 914f                      	write 'r'
0000c8 934f
0000c9 e742
0000ca d430
0000cb d438
0000cc 914f                      	write 'r'
0000cd 934f
0000ce e645
0000cf d42b
0000d0 d433
0000d1 914f                      	write 'e'
0000d2 934f
0000d3 e64e
0000d4 d426
0000d5 d42e
0000d6 914f                      	write 'n'
0000d7 934f
0000d8 e744
0000d9 d421
0000da d429
0000db 914f                      	write 't'
0000dc 934f
0000dd e240
0000de d41c
0000df d424
0000e0 914f                      	write ' '
0000e1 934f
0000e2 e646
0000e3 d417
0000e4 d41f
0000e5 914f                      	write 'f'
0000e6 934f
0000e7 e64c
0000e8 d412
0000e9 d41a
0000ea 914f                      	write 'l'
0000eb 934f
0000ec e64f
0000ed d40d
0000ee d415
0000ef 914f                      	write 'o'
0000f0 934f
0000f1 e64f
0000f2 d408
0000f3 d410
0000f4 914f                      	write 'o'
0000f5 934f
0000f6 e742
0000f7 d403
0000f8 d40b
0000f9 914f                      	write 'r'
0000fa 9811                      	lcd_clr 1
                                 
0000fb 934f
0000fc 935f
0000fd e042
0000fe 3042
0000ff f039
000100 e850
000101 6050
000102 2f45
000103 d3f0
000104 d3ff
000105 940c 010c
000107 ec50
000108 6050
000109 2f45
00010a d3e9
00010b d3f8
00010c 915f
00010d 914f                      	change_line 2, 0
                                 	
00010e 934f
00010f e44e
000110 d3ea
000111 d3f2
000112 914f                      	write 'N'
000113 934f
000114 e645
000115 d3e5
000116 d3ed
000117 914f                      	write 'e'
000118 934f
000119 e748
00011a d3e0
00011b d3e8
00011c 914f                      	write 'x'
00011d 934f
00011e e744
00011f d3db
000120 d3e3
000121 914f                      	write 't'
000122 934f
000123 e240
000124 d3d6
000125 d3de
000126 914f                      	write ' '
000127 934f
000128 e743
000129 d3d1
00012a d3d9
00012b 914f                      	write 's'
00012c 934f
00012d e744
00012e d3cc
00012f d3d4
000130 914f                      	write 't'
000131 934f
000132 e64f
000133 d3c7
000134 d3cf
000135 914f                      	write 'o'
000136 934f
000137 e740
000138 d3c2
000139 d3ca
00013a 914f                      	write 'p'
                                 
00013b 934f
00013c 935f
00013d e042
00013e 3042
00013f f039
000140 e850
000141 605d
000142 2f45
000143 d3b0
000144 d3bf
000145 940c 014c
000147 ec50
000148 605d
000149 2f45
00014a d3a9
00014b d3b8
00014c 915f
00014d 914f                      	change_line 2, 13
00014e 934f
00014f e543
000150 d3aa
000151 d3b2
000152 914f                      	write 'S'
                                 
000153 d44e                      	rcall show_floor
000154 9478                          sei
000155 940c 0216                     jmp main
                                 
                                 
                                 
                                 
                                 EXT_INT0:
                                 
000157 934f
000158 2d4d
000159 7044
00015a 3044
00015b 914f                      	check_register_bit doorsOpen
00015c f409                      	brne INT0_END
00015d 24bb                      	clr debounce1
                                 
                                 INT0_END:
00015e 9518                          reti
                                 
                                 
                                 
                                 EXT_INT1:
                                 	
00015f 934f
000160 2d4d
000161 7140
000162 3140
000163 914f                      	check_register_bit closing
000164 f069                      	breq RE_OPEN
000165 934f
000166 2d4d
000167 7044
000168 3044
000169 914f                      	check_register_bit doorsOpen
00016a f049                      	breq HELD_OPEN
00016b 934f
00016c 2d4d
00016d 7840
00016e 3840
00016f 914f                      	check_register_bit held
000170 f029                      	breq LET_CLOSE
000171 c006                      	rjmp INT1_END
                                 RE_OPEN:
                                 
000172 24cc                      	clr debounce2
000173 c004                      	rjmp INT1_END
                                 HELD_OPEN:
                                 
000174 24cc                      	clr debounce2
000175 c002                      	rjmp INT1_END
                                 LET_CLOSE:
                                 
000176 24cc                      	clr debounce2
000177 c000                      	rjmp INT1_END
                                 INT1_END:
                                 
000178 9518                          reti
                                 
                                 Timer0OVF:
000179 934f                      	push temp1
00017a b74f                          in temp1, SREG   	 ; stack frame for timer interrupt handler
00017b 934f                          push temp1
00017c 939f                          push r25
00017d 938f                          push r24
                                 
00017e 9180 020b                     lds r24, Count   	 ; increment count
000180 9190 020c                     lds r25, Count + 1
000182 9601                          adiw r25:r24, 1
                                     
000183 308d                          cpi r24, low(clock_speed)    ; compare with clock speed to check if 1/10 of second has passed
000184 e043                          ldi temp1, high(clock_speed)
000185 0794                          cpc r25, temp1
000186 f471                          brne Not_second
000187 9180 020d                     lds r24, Seconds   		 ; increment seconds every 1/10 of second
000189 9190 020e                     lds r25, Seconds+1
                                 
                                 
                                 /*    lds temp1, Debounce1   	 ; decrement Debounce counter for INT0
                                     dec temp1
                                     sts Debounce1, temp1
                                 
                                     lds temp1, Debounce2   	 ; decrement Debounce counter for INT1
                                     dec temp1
                                     sts Debounce2, temp1*/
                                 
00018b 9601                          adiw r25:r24, 1
00018c 9380 020d                     sts Seconds, r24
00018e 9390 020e                     sts Seconds+1, r25
000190 9230 020b
000192 9230 020c                     clear Count
000194 c004                          rjmp End_I
                                 
                                 Not_second:
000195 9380 020b                     sts Count, r24
000197 9390 020c                     sts Count+1, r25
                                 
                                 End_I:
                                 ; Epilogue
000199 919f                          pop r25
00019a 918f                          pop r24
00019b 914f                          pop temp1
00019c bf4f                          out SREG, temp1
00019d 914f                      	pop temp1
00019e 9518                          reti
                                 
                                 
                                 Timer1OVF:
00019f 934f                      	push temp1
0001a0 b74f                      	in temp1, SREG
0001a1 934f                      	push temp1
0001a2 93af                      	push XL
0001a3 93bf                      	push XH
                                 
                                 	//out PORTC, debounce1
0001a4 ef4f                      	ser temp1
0001a5 16b4                      	cp debounce1, temp1
0001a6 f0d9                      	breq DB2
0001a7 e043                      	ldi temp1, 3
0001a8 16b4                      	cp debounce1, temp1
0001a9 f414                      	brge action1
0001aa 94b3                      	inc debounce1
                                 	//lcd_set 1	
0001ab c016                      	rjmp  DB2
                                 action1:
                                 	//lcd_clr 1
0001ac 934f
0001ad 2d4d
0001ae 7044
0001af 3044
0001b0 914f                      	check_register_bit doorsOpen
0001b1 f471                      	brne END_DB1
0001b2 934f
0001b3 2d4d
0001b4 7f4b
0001b5 2ed4
0001b6 914f                      	clear_register_bit doorsOpen
0001b7 934f
0001b8 2d4d
0001b9 6140
0001ba 2ed4
0001bb 914f                      	set_register_bit closing
0001bc 9230 020d
0001be 9230 020e                 	clear Seconds
                                 	//out PORTG, one
                                 
                                 END_DB1:
0001c0 ef4f                      	ser temp1
0001c1 2eb4                      	mov debounce1, temp1
                                 
                                 DB2:
0001c2 ef4f                      	ser temp1
0001c3 16c4                      	cp debounce2, temp1
0001c4 f409                      	brne valid_interrupt2
0001c5 c04a                      	rjmp End_timer1
                                 valid_interrupt2:
0001c6 e043                      	ldi temp1, 3
0001c7 16c4                      	cp debounce2, temp1
0001c8 f414                      	brge action2
0001c9 94c3                      	inc debounce2
0001ca c045                      	rjmp End_Timer1
                                 action2:
0001cb 934f
0001cc 2d4d
0001cd 7140
0001ce 3140
0001cf 914f                      	check_register_bit closing
0001d0 f069                      	breq RE_OPEN_ACTION
0001d1 934f
0001d2 2d4d
0001d3 7840
0001d4 3840
0001d5 914f                      	check_register_bit held
0001d6 f0f9                      	breq LET_CLOSE_ACTION
0001d7 934f
0001d8 2d4d
0001d9 7044
0001da 3044
0001db 914f                      	check_register_bit doorsOpen
0001dc f081                      	breq HELD_OPEN_ACTION
0001dd c02f                      	rjmp END_DB2
                                 RE_OPEN_ACTION:
0001de 934f
0001df 2d4d
0001e0 7e4f
0001e1 2ed4
0001e2 914f                      	clear_register_bit closing
0001e3 934f
0001e4 2d4d
0001e5 6048
0001e6 2ed4
0001e7 914f                      	set_register_bit opening
0001e8 9230 020d
0001ea 9230 020e                 	clear Seconds
0001ec c020                      	rjmp END_DB2
                                 HELD_OPEN_ACTION:
                                 	//lcd_set 1
                                 	//out PORTG, one
0001ed 934f
0001ee 2d4d
0001ef 6840
0001f0 2ed4
0001f1 914f                      	set_register_bit held
0001f2 e24e                      	ldi temp1, 0b00101110    ;falling edges for interrupts 2 and 0  RISING edge for interrupt 1
0001f3 9340 0069                     sts EICRA, temp1
0001f5 c017                      	rjmp END_DB2 	
                                 LET_CLOSE_ACTION:
                                 	//lcd_set 1
0001f6 934f
0001f7 2d4d
0001f8 774f
0001f9 2ed4
0001fa 914f                      	clear_register_bit held
0001fb 934f
0001fc 2d4d
0001fd 7f4b
0001fe 2ed4
0001ff 914f                      	clear_register_bit doorsOpen
000200 ba44                      	out PORTG, one
000201 934f
000202 2d4d
000203 6140
000204 2ed4
000205 914f                      	set_register_bit closing
000206 e24a                          ldi temp1, 0b00101010    ;falling edges for interrupts 2, 1 and 0
000207 9340 0069                     sts EICRA, temp1 
000209 9230 020d
00020b 9230 020e                 	clear Seconds
                                 
                                 END_DB2:
00020d 9811                      	lcd_clr 1
00020e ef4f                      	ser temp1
00020f 2ec4                      	mov debounce2, temp1
                                 	
                                 
                                 End_Timer1:
000210 91bf                      	pop XH
000211 91af                      	pop XL
000212 914f                      	pop temp1
000213 bf4f                      	out SREG, temp1
000214 914f                      	pop temp1
000215 9518                      	reti
                                 
                                 // Function to insert input floor into list
                                 // parameters Address of queue (X), input_floor (arg1), current_floor (global), direction (b1 of r20, global)
                                 // will set requested_floor (global), direction (b1 of r20, global)
                                 
                                 
                                 
                                 
                                 //MAIN:
                                 main:
                                 /*	lds r24, Seconds   		 ; increment seconds every 1/10 of second
                                     lds r25, Seconds+1		 ;FOR DEBUGGING ONLY
                                     adiw r25:r24, 5
                                     sts Seconds, r24
                                     sts Seconds+1, r25*/
                                 // ---------------------------------------- SCANNING THE KEYPAD \/
                                 
000216 934f
000217 935f
000218 e041
000219 3042
00021a f039
00021b e850
00021c 605e
00021d 2f45
00021e d2d5
00021f d2e4
000220 940c 0227
000222 ec50
000223 605e
000224 2f45
000225 d2ce
000226 d2dd
000227 915f
000228 914f                      	change_line 1, 14
000229 2f60                      	mov arg1, current_floor
00022a d38f                      	rcall convert_to_ascii
00022b 934f
00022c 935f
00022d e042
00022e 3042
00022f f039
000230 e850
000231 605a
000232 2f45
000233 d2c0
000234 d2cf
000235 940c 023c
000237 ec50
000238 605a
000239 2f45
00023a d2b9
00023b d2c8
00023c 915f
00023d 914f                      	change_line 2, 10
00023e 2f61                      	mov arg1, requested_floor
00023f d37a                      	rcall convert_to_ascii
000240 934f
000241 935f
000242 e042
000243 3042
000244 f039
000245 e850
000246 605e
000247 2f45
000248 d2ab
000249 d2ba
00024a 940c 0251
00024c ec50
00024d 605e
00024e 2f45
00024f d2a4
000250 d2b3
000251 915f
000252 914f                      	change_line 2, 14
000253 9160 020d                 	lds arg1, Seconds
000255 9566                      	lsr arg1
000256 9566                      	lsr arg1
000257 9566                      	lsr arg1
000258 d361                      	rcall convert_to_ascii
                                 /*	lds arg1, Queue_len
                                 	rcall convert_to_ascii*/
                                 	//display current_floor and requested_floor on LCD
                                 	//requested floor = 0 in Reset (TODO)
                                 
000259 d3d8                      	rcall scan				//reading the queue
                                 /*	mov arg1, ret1 
                                 	rcall convert_to_ascii*/ //DEBUGGING
00025a 2d2a                      	mov input_value, ret1
                                 
                                 /*	if input_value == *
                                 		emergency func*/
00025b 322a                      	cpi input_value, '*'
00025c f409                      	brne add_to_queue
00025d d0ce                      	rcall emergency_func
                                 add_to_queue:
00025e d2d0                      	rcall insert_request
                                 	
                                 // ---------------------------------------- SCANNING THE KEYPAD	/\
                                 
                                 // ---------------------------------------- CHECKING STOPPED \/
                                 
00025f 934f
000260 2d4d
000261 7041
000262 3041
000263 914f                      	check_register_bit stopped		//already stopped
000264 f409                      	brne read_queue
000265 c040                      	rjmp stop_here
                                 
                                 // ---------------------------------------- CHECKING STOPPED /\
                                 
                                 // ---------------------------------------- DISPLAYING THE CURRENT FLOOR AND REQUESTED FLOOR \/
                                 read_queue:
000266 d33b                      	rcall show_floor
                                 /*	ldi temp1, 0
                                 	out PORTG, temp1*/
                                 	
                                 // ---------------------------------------- DISPLAYING THE CURRENT FLOOR AND REQUESTED FLOOR /\
                                 
                                 // ---------------------------------------- READING THE QUEUE \/
000267 e010                      	ldi requested_floor, 0		//assume queue empty	
000268 9140 0200                 	lds temp1, Queue_len		//is the queue empty?
00026a 3040                      	cpi temp1, 0
00026b f079                      	breq to_main
                                 
                                 
00026c 9110 0201                 	lds requested_floor, Queue
00026e 1701                      	cp current_floor, requested_floor	//on correct floor?
00026f f469                      	brne check_direction
                                 				
000270 934f
000271 2d4d
000272 6041
000273 2ed4
000274 914f                      	set_register_bit stopped			//first detection of requested_floor
000275 934f
000276 2d4d
000277 6048
000278 2ed4
000279 914f                      	set_register_bit opening
00027a c02b                      	rjmp stop_here
                                 // ---------------------------------------- READING THE QUEUE /\
                                 to_main:
00027b 940c 0216                 	jmp main
                                 // ---------------------------------------- MOVING BETWEEN FLOORS \/
                                 check_direction:
00027d f00c                      	brlt direction_up
00027e f434                      	brge direction_down
                                 	
                                 direction_up:
00027f 934f
000280 2d4d
000281 6042
000282 2ed4
000283 914f                      	set_register_bit goingUp
000284 c006                      	rjmp moving
                                 direction_down:
000285 934f
000286 2d4d
000287 7f4d
000288 2ed4
000289 914f                      	clear_register_bit goingUp
00028a c000                      	rjmp moving
                                 
                                 moving:
00028b 9180 020d                 	lds r24, Seconds		//2 Seconds passed?
00028d 9190 020e                 	lds r25, Seconds+1
00028f 3184                      	cpi r24, 20
000290 f354                      	brlt to_main
                                 
000291 9230 020d
000293 9230 020e                 	clear Seconds
000295 934f
000296 2d4d
000297 7042
000298 3042
000299 914f                      	check_register_bit goingUp
00029a f009                      	breq moving_up
00029b c005                      	rjmp moving_down
                                 
                                 
                                 moving_up:
00029c e04a                      	ldi temp1, 10				//don't increment past 10
00029d 1304                      	cpse current_floor, temp1
00029e 9503                      	inc current_floor			//move up a floor
00029f d302                      	rcall show_floor
0002a0 cf75                      	rjmp main
                                 
                                 moving_down:
0002a1 e041                      	ldi temp1, 1
0002a2 1304                      	cpse current_floor, temp1
0002a3 950a                      	dec current_floor
0002a4 d2fd                      	rcall show_floor
0002a5 cf70                      	rjmp main
                                 // ---------------------------------------- MOVING BETWEEN FLOORS /\
                                 
                                 
                                 // ---------------------------------------- STOPPING AT THE FLOOR \/
                                 stop_here:
0002a6 934f
0002a7 2d4d
0002a8 7048
0002a9 3048
0002aa 914f                      	check_register_bit opening
0002ab f069                      	breq opening_sequence
0002ac 934f
0002ad 2d4d
0002ae 7044
0002af 3044
0002b0 914f                      	check_register_bit doorsOpen
0002b1 f151                      	breq doors_open_sequence
0002b2 934f
0002b3 2d4d
0002b4 7140
0002b5 3140
0002b6 914f                      	check_register_bit closing
0002b7 f101                      	breq to_closing_sequence
0002b8 c070                      	rjmp end_main
                                 
                                 opening_sequence:
                                 /*	ldi temp1, 1
                                 	out PORTG, temp1*/
0002b9 d349                      	rcall LED_flash
0002ba 934f
0002bb e24a
0002bc 9340 009a
0002be 2744
0002bf 9340 009b
0002c1 914f                      	set_motor_speed 0x2A
0002c2 9180 020d                 	lds r24, Seconds		//1 Second passed?
0002c4 9190 020e                 	lds r25, Seconds+1
0002c6 308a                      	cpi r24, 10
0002c7 f40c                      	brge opening_done
0002c8 cf4d                      	rjmp main
                                 opening_done:
0002c9 9230 020d
0002cb 9230 020e                 	clear Seconds
0002cd 934f
0002ce 2d4d
0002cf 7f47
0002d0 2ed4
0002d1 914f                      	clear_register_bit opening
0002d2 934f
0002d3 2d4d
0002d4 6044
0002d5 2ed4
0002d6 914f                      	set_register_bit doorsOpen
0002d7 cf3e                      	rjmp main
                                 
                                 to_closing_sequence:
0002d8 940c 0301                 	jmp closing_sequence
                                 to_main2:
0002da 940c 0216                 	jmp main
                                 
                                 doors_open_sequence:
                                 /*	ldi temp1, 2
                                 	out PORTG, temp1*/	
0002dc 934f
0002dd e040
0002de 9340 009a
0002e0 2744
0002e1 9340 009b
0002e3 914f                      	set_motor_speed 0
0002e4 9180 020d                 	lds r24, Seconds		//3 seconds passed?
0002e6 9190 020e                 	lds r25, Seconds+1
                                 	//mov arg1, r24			//LED_flash needs the time as an argument
0002e8 d31a                      	rcall LED_flash
0002e9 934f
0002ea 2d4d
0002eb 7840
0002ec 3840
0002ed 914f                      	check_register_bit held
0002ee f359                      	breq to_main2
0002ef 318e                      	cpi r24, 30
0002f0 f40c                      	brge doors_open_done
0002f1 cf24                      	rjmp main
                                 doors_open_done:
0002f2 9230 020d
0002f4 9230 020e                 	clear Seconds
0002f6 934f
0002f7 2d4d
0002f8 7f4b
0002f9 2ed4
0002fa 914f                      	clear_register_bit doorsOpen
0002fb 934f
0002fc 2d4d
0002fd 6140
0002fe 2ed4
0002ff 914f                      	set_register_bit closing	
000300 cf15                      	rjmp main
                                 
                                 closing_sequence:
                                 /*	ldi temp1, 3
                                 	out PORTG, temp1*/
000301 d301                      	rcall LED_flash
000302 934f
000303 e84a
000304 9340 009a
000306 2744
000307 9340 009b
000309 914f                      	set_motor_speed 0x8A
00030a 9180 020d                 	lds r24, Seconds		//1 Second passed?
00030c 9190 020e                 	lds r25, Seconds+1
00030e 308a                      	cpi r24, 10				
00030f f40c                      	brge closing_done
000310 cf05                      	rjmp main
                                 closing_done:
000311 9230 020d
000313 9230 020e                 	clear Seconds
                                 	//out PORTG, zero //bug testing board
                                 
000315 934f
000316 2d4d
000317 7e4f
000318 2ed4
000319 914f                      	clear_register_bit closing
00031a 934f
00031b 2d4d
00031c 7f4e
00031d 2ed4
00031e 914f                      	clear_register_bit stopped
00031f 934f
000320 e040
000321 9340 009a
000323 2744
000324 9340 009b
000326 914f                      	set_motor_speed 0
000327 d34d                      	rcall shuffle_queue
000328 ceed                      	rjmp main
                                 // ---------------------------------------- STOPPING AT THE FLOOR /\
                                 
                                 // ---------------------------------------- ERROR HANDLING \/
                                 end_main:
000329 ec4c                      	ldi temp1, 0b11001100
00032a b948                      	out PORTC, temp1
00032b cffd                      	rjmp end_main
                                 // ---------------------------------------- ERROR HANDLING /\
                                 
                                 // ---------------------------------------- EMERGENCY FUNCTION \/
                                 
                                 
                                 
                                 
                                 emergency_func:
                                 
00032c 934f                      	push temp1
                                 	
00032d b74f                      	in temp1, SREG
00032e 934f                      	push temp1
                                 	
00032f 9140 020b                 	lds temp1, Count
000331 934f                      	push temp1
                                 	
000332 9140 020c                 	lds temp1, Count+1
000334 934f                      	push temp1
                                 
000335 9140 020d                 	lds temp1, Seconds
000337 934f                      	push temp1
                                 	
000338 9140 020e                 	lds temp1, Seconds+1
00033a 934f                      	push temp1
                                 	
00033b 92ef                      	push old_floor
00033c 930f                      	push current_floor
00033d 938f                      	push r24
00033e 939f                      	push r25	
                                 
00033f e041
000340 d1b3
000341 d1c2                      	clear_disp
000342 9230 020d
000344 9230 020e                 	clear Seconds
000346 934f
000347 e445
000348 d1b2
000349 d1ba
00034a 914f                      	write 'E'
00034b 934f
00034c e64d
00034d d1ad
00034e d1b5
00034f 914f                      	write 'm'
000350 934f
000351 e645
000352 d1a8
000353 d1b0
000354 914f                      	write 'e'
000355 934f
000356 e742
000357 d1a3
000358 d1ab
000359 914f                      	write 'r'
00035a 934f
00035b e647
00035c d19e
00035d d1a6
00035e 914f                      	write 'g'
00035f 934f
000360 e645
000361 d199
000362 d1a1
000363 914f                      	write 'e'
000364 934f
000365 e64e
000366 d194
000367 d19c
000368 914f                      	write 'n'
000369 934f
00036a e643
00036b d18f
00036c d197
00036d 914f                      	write 'c'
00036e 934f
00036f e749
000370 d18a
000371 d192
000372 914f                      	write 'y'
000373 934f
000374 935f
000375 e042
000376 3042
000377 f039
000378 e850
000379 6050
00037a 2f45
00037b d178
00037c d187
00037d 940c 0384
00037f ec50
000380 6050
000381 2f45
000382 d171
000383 d180
000384 915f
000385 914f                      	change_line 2, 0
000386 934f
000387 e443
000388 d172
000389 d17a
00038a 914f                      	write 'C'
00038b 934f
00038c e641
00038d d16d
00038e d175
00038f 914f                      	write 'a'
000390 934f
000391 e64c
000392 d168
000393 d170
000394 914f                      	write 'l'
000395 934f
000396 e64c
000397 d163
000398 d16b
000399 914f                      	write 'l'
00039a 934f
00039b e240
00039c d15e
00039d d166
00039e 914f                      	write ' '
00039f 934f
0003a0 e340
0003a1 d159
0003a2 d161
0003a3 914f                      	write '0'
0003a4 934f
0003a5 e340
0003a6 d154
0003a7 d15c
0003a8 914f                      	write '0'
0003a9 934f
0003aa e340
0003ab d14f
0003ac d157
0003ad 914f                      	write '0'
                                 
                                 
0003ae 2ee0                      	mov old_floor, current_floor	   // for restoring original floor
                                 
                                 drop_floor_loop:
0003af d271                      	rcall Strobe_flash
0003b0 d1f1                      	rcall show_floor
0003b1 3001                      	cpi current_floor, 1
0003b2 f069                      	breq drop_floor_end
0003b3 9180 020d                 	lds r24, Seconds
0003b5 9190 020e                 	lds r25, Seconds+1
0003b7 2f68                      	mov arg1, r24
0003b8 3184                      	cpi r24, 20
0003b9 f3ac                      	brlt drop_floor_loop
0003ba 950a                      	dec current_floor
0003bb 9230 020d
0003bd 9230 020e                 	clear Seconds
0003bf cfef                      	rjmp drop_floor_loop
                                 drop_floor_end:
                                 
                                 emergency_opening:
0003c0 d260                      	rcall strobe_flash
0003c1 d241                      	rcall LED_flash
0003c2 d26f                      	rcall scan
0003c3 e24a                      	ldi temp1, '*'
0003c4 16a4                      	cp ret1, temp1
0003c5 f429                      	brne continue_e_opening
0003c6 934f
0003c7 2d4d
0003c8 7b4f
0003c9 2ed4
0003ca 914f                      	clear_register_bit emergency //emergency cancelled
                                 continue_e_opening:
                                 
0003cb 934f
0003cc e24a
0003cd 9340 009a
0003cf 2744
0003d0 9340 009b
0003d2 914f                      	set_motor_speed 0x2A
0003d3 9180 020d                 	lds r24, Seconds		//1 Second passed?
0003d5 9190 020e                 	lds r25, Seconds+1
0003d7 308a                      	cpi r24, 10
0003d8 f40c                      	brge emergency_opening_done
0003d9 cfe6                      	rjmp emergency_opening
                                 emergency_opening_done:
0003da 9230 020d
0003dc 9230 020e                 	clear Seconds
                                 
                                 
                                 emergency_doors_open:
0003de d242                      	rcall strobe_flash
0003df d223                      	rcall LED_flash
0003e0 d251                      	rcall scan
0003e1 e24a                      	ldi temp1, '*'
0003e2 16a4                      	cp ret1, temp1
0003e3 f451                      	brne continue_e_doors_open
0003e4 934f
0003e5 2d4d
0003e6 7b4f
0003e7 2ed4
0003e8 914f                      	clear_register_bit emergency
0003e9 9230 020d
0003eb 9230 020e                 	clear Seconds
0003ed c013                      	rjmp emergency_closing
                                 continue_e_doors_open:
0003ee 934f
0003ef e040
0003f0 9340 009a
0003f2 2744
0003f3 9340 009b
0003f5 914f                      	set_motor_speed 0
0003f6 9180 020d                 	lds r24, Seconds		//3 seconds passed?
0003f8 9190 020e                 	lds r25, Seconds+1
0003fa 318e                      	cpi r24, 30
0003fb f40c                      	brge emergency_doors_open_done
0003fc cfe1                      	rjmp emergency_doors_open
                                 emergency_doors_open_done:
0003fd 9230 020d
0003ff 9230 020e                 	clear Seconds
                                 
                                 emergency_closing:
000401 d21f                      	rcall strobe_flash
000402 d200                      	rcall LED_flash
000403 d22e                      	rcall scan
000404 e24a                      	ldi temp1, '*'
000405 16a4                      	cp ret1, temp1
000406 f429                      	brne continue_e_closing
000407 934f
000408 2d4d
000409 7b4f
00040a 2ed4
00040b 914f                      	clear_register_bit emergency
                                 continue_e_closing:
00040c 934f
00040d e84a
00040e 9340 009a
000410 2744
000411 9340 009b
000413 914f                      	set_motor_speed 0x8A
000414 9180 020d                 	lds r24, Seconds		//1 Second passed?
000416 9190 020e                 	lds r25, Seconds+1
000418 308a                      	cpi r24, 10				
000419 f40c                      	brge emergency_closing_done
00041a cfe6                      	rjmp emergency_closing
                                 emergency_closing_done:
00041b 9230 020d
00041d 9230 020e                 	clear Seconds
                                 
                                 emergency_halt_loop:
00041f d201                      	rcall strobe_flash
000420 d181                      	rcall show_floor
000421 d210                      	rcall scan
000422 e24a                      	ldi temp1, '*'
000423 16a4                      	cp ret1, temp1	
000424 f429                      	brne continue_e_halt
000425 934f
000426 2d4d
000427 7b4f
000428 2ed4
000429 914f                      	clear_register_bit emergency
                                 continue_e_halt:	
00042a 934f
00042b 2d4d
00042c 7440
00042d 3440
00042e 914f                      	check_register_bit emergency
00042f f379                      	breq emergency_halt_loop
000430 9230 020d
000432 9230 020e                 	clear Seconds
                                 
                                 restore_floor:
000434 d16d                      	rcall show_floor
000435 150e                      	cp current_floor, old_floor
000436 f061                      	breq restore_floor_end
000437 9180 020d                 	lds r24, Seconds
000439 9190 020e                 	lds r25, Seconds+1
00043b 3184                      	cpi r24, 20
00043c f3bc                      	brlt restore_floor
00043d 9503                      	inc current_floor
00043e 9230 020d
000440 9230 020e                 	clear Seconds
000442 cff1                      	rjmp restore_floor
                                 
                                 restore_floor_end:
000443 e041
000444 d0af
000445 d0be                      	clear_disp
000446 934f
000447 e443
000448 d0b2
000449 d0ba
00044a 914f                      	write 'C'
00044b 934f
00044c e745
00044d d0ad
00044e d0b5
00044f 914f                      	write 'u'
000450 934f
000451 e742
000452 d0a8
000453 d0b0
000454 914f                      	write 'r'
000455 934f
000456 e742
000457 d0a3
000458 d0ab
000459 914f                      	write 'r'
00045a 934f
00045b e645
00045c d09e
00045d d0a6
00045e 914f                      	write 'e'
00045f 934f
000460 e64e
000461 d099
000462 d0a1
000463 914f                      	write 'n'
000464 934f
000465 e744
000466 d094
000467 d09c
000468 914f                      	write 't'
000469 934f
00046a e240
00046b d08f
00046c d097
00046d 914f                      	write ' '
00046e 934f
00046f e646
000470 d08a
000471 d092
000472 914f                      	write 'f'
000473 934f
000474 e64c
000475 d085
000476 d08d
000477 914f                      	write 'l'
000478 934f
000479 e64f
00047a d080
00047b d088
00047c 914f                      	write 'o'
00047d 934f
00047e e64f
00047f d07b
000480 d083
000481 914f                      	write 'o'
000482 934f
000483 e742
000484 d076
000485 d07e
000486 914f                      	write 'r'
000487 9811                      	lcd_clr 1
                                 
000488 934f
000489 935f
00048a e042
00048b 3042
00048c f039
00048d e850
00048e 6050
00048f 2f45
000490 d063
000491 d072
000492 940c 0499
000494 ec50
000495 6050
000496 2f45
000497 d05c
000498 d06b
000499 915f
00049a 914f                      	change_line 2, 0
                                 	
00049b 934f
00049c e44e
00049d d05d
00049e d065
00049f 914f                      	write 'N'
0004a0 934f
0004a1 e645
0004a2 d058
0004a3 d060
0004a4 914f                      	write 'e'
0004a5 934f
0004a6 e748
0004a7 d053
0004a8 d05b
0004a9 914f                      	write 'x'
0004aa 934f
0004ab e744
0004ac d04e
0004ad d056
0004ae 914f                      	write 't'
0004af 934f
0004b0 e240
0004b1 d049
0004b2 d051
0004b3 914f                      	write ' '
0004b4 934f
0004b5 e743
0004b6 d044
0004b7 d04c
0004b8 914f                      	write 's'
0004b9 934f
0004ba e744
0004bb d03f
0004bc d047
0004bd 914f                      	write 't'
0004be 934f
0004bf e64f
0004c0 d03a
0004c1 d042
0004c2 914f                      	write 'o'
0004c3 934f
0004c4 e740
0004c5 d035
0004c6 d03d
0004c7 914f                      	write 'p'
                                 
0004c8 934f
0004c9 935f
0004ca e042
0004cb 3042
0004cc f039
0004cd e850
0004ce 605d
0004cf 2f45
0004d0 d023
0004d1 d032
0004d2 940c 04d9
0004d4 ec50
0004d5 605d
0004d6 2f45
0004d7 d01c
0004d8 d02b
0004d9 915f
0004da 914f                      	change_line 2, 13
0004db 934f
0004dc e543
0004dd d01d
0004de d025
0004df 914f                      	write 'S'
                                 	
0004e0 919f                      	pop r25
0004e1 918f                      	pop r24
0004e2 910f                      	pop current_floor
0004e3 90ef                      	pop old_floor
                                 
0004e4 914f                      	pop temp1
0004e5 9340 020e                 	sts Seconds+1, temp1
                                 
0004e7 914f                      	pop temp1
0004e8 9340 020d                 	sts Seconds, temp1
                                 	
0004ea 914f                      	pop temp1
0004eb 9340 020c                 	sts Count+1, temp1
                                  	
0004ed 914f                      	pop temp1
0004ee 9340 020b                 	sts Count, temp1
                                 
0004f0 914f                      	pop temp1
0004f1 bf4f                      	out SREG, temp1
                                 
0004f2 914f                      	pop temp1
                                 	
0004f3 9508                      	ret
                                 
                                 	
                                 
                                 
                                 	
                                 
                                 
                                 
                                 
                                 	
                                 
                                 
                                 	
                                 
                                 
                                 	
                                 
                                 
                                 
                                 // ---------------------------------------- EMERGENCY FUNCTION /\
                                 
                                 
                                 // ---------------------------------------- LCD_FUNCTIONS \/
                                 lcd_command:
0004f4 bb41                          out PORTF, temp1
0004f5 d01f                          rcall sleep_1ms
0004f6 9a16                          lcd_set LCD_E
0004f7 d01d                          rcall sleep_1ms
0004f8 9816                          lcd_clr LCD_E
0004f9 d01b                          rcall sleep_1ms
0004fa 9508                          ret
                                 
                                 lcd_data:
0004fb bb41                          out PORTF, temp1
0004fc 9a17                          lcd_set LCD_RS
0004fd d017                          rcall sleep_1ms
0004fe 9a16                          lcd_set LCD_E
0004ff d015                          rcall sleep_1ms
000500 9816                          lcd_clr LCD_E
000501 d013                          rcall sleep_1ms
000502 9817                          lcd_clr LCD_RS
000503 9508                          ret
                                 
                                 lcd_wait:
000504 930f                          push r16
000505 2700                          clr r16
000506 bb00                          out DDRF, r16
000507 bb01                          out PORTF, r16
000508 9a15                          lcd_set LCD_RW
                                 
                                 lcd_wait_loop:
000509 d00b                          rcall sleep_1ms
00050a 9a16                          lcd_set LCD_E
00050b d009                          rcall sleep_1ms
00050c b10f                          in r16, PINF
00050d 9816                          lcd_clr LCD_E
00050e fd07                          sbrc r16, 7
00050f cff9                          rjmp lcd_wait_loop
000510 9815                          lcd_clr LCD_RW
000511 ef0f                          ser r16
000512 bb00                          out DDRF, r16
000513 910f                          pop r16
000514 9508                          ret
                                 
                                 .equ F_CPU = 160000		//edited from 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
000515 938f                          push r24
000516 939f                          push r25
000517 e090                          ldi r25, high(DELAY_1MS)
000518 e284                          ldi r24, low(DELAY_1MS)
                                 
                                 delayloop_1ms:
000519 9701                          sbiw r25:r24, 1	 //DEBUGGING
00051a f7f1                          brne delayloop_1ms
00051b 919f                          pop r25
00051c 918f                          pop r24
00051d 9508                          ret
                                 
                                 sleep_5ms:
00051e dff6                          rcall sleep_1ms
00051f dff5                          rcall sleep_1ms
000520 dff4                          rcall sleep_1ms
000521 dff3                          rcall sleep_1ms
000522 dff2                          rcall sleep_1ms
000523 9508                          ret
                                 
                                 pause:
000524 dff9                      	rcall sleep_5ms
000525 dff8                      	rcall sleep_5ms
000526 dff7                      	rcall sleep_5ms
000527 dff6                      	rcall sleep_5ms
000528 dff5                      	rcall sleep_5ms
000529 dff4                      	rcall sleep_5ms
00052a dff3                      	rcall sleep_5ms
00052b dff2                      	rcall sleep_5ms
00052c dff1                      	rcall sleep_5ms
00052d dff0                      	rcall sleep_5ms
00052e 9518                      	reti
                                 
                                 // ---------------------------------------- LCD_FUNCTIONS
                                 
                                 // ---------------------------------------- FUNCTIONS
                                 
                                 
                                 //INSERT_REQUEST
                                 
                                 insert_request:
                                 
                                 //prologue
00052f 935f                      push temp2
000530 b75f                      in temp2 , SREG
000531 935f                      push temp2
                                 
000532 927f                      push counter
000533 930f                      push r16
000534 931f                      push r17
                                 //r16 current_floor global
                                 //r17 requested_floor return value
                                 
000535 932f                      push r18    //parameter input_value
                                 //r19 lift_status global
000536 933f                      push r19
000537 934f                      push r20    //temp1
000538 936f                      push r22
000539 936f                      push arg1
00053a 937f                      push arg2
                                 
00053b 93af                      push XL
00053c 93bf                      push XH
                                 
00053d e0a1                      ldi XL, low(Queue)
00053e e0b2                      ldi XH, high(Queue)
00053f 9160 0200                 lds r22, Queue_len
                                 
000541 24aa                      clr ret1
                                 
000542 302b                      cpi input_value, 11
000543 f014                      brlt under_11
000544 940c 0591                 jmp end_insert_loop
                                 under_11:
000546 3021                      cpi input_value, 1
000547 f414                      brge valid_insert
000548 940c 0591                 jmp end_insert_loop
                                 valid_insert:
                                 
00054a 2477                      clr counter // counter = 0
00054b 9160 0200                 lds r22, Queue_len
00054d 1702                      cp current_floor, input_value //if the current floor is the input floor, break to end
00054e f411                      brne input_continue
00054f 940c 0591                 jmp end_insert_loop
                                 input_continue:
000551 2ea2                      mov ret1, input_value
                                 
                                 
                                 
000552 934f
000553 2d4d
000554 7042
000555 3042
000556 914f                      check_register_bit goingUp    // check the goingUp bit
000557 f009                      breq up_search    // if 1, sort up
000558 c018                      rjmp down_search 	 //else sort down
                                 
                                 
                                 
                                 //r7 counter r22 len
                                 
                                 up_search:
000559 1720                          cp input_value, current_floor   		 ; if input floor < current floor, jump to up_descending_loop, else up_ascending_loop
00055a f05c                          brlt up_descending_loop
                                 up_ascending_loop:
00055b 1676                          cp counter, r22   		 ; compare counter to len (check if end of list reached)
00055c f159                          breq end_search
00055d 914c                          ld temp1, X   		 ; load floor from output array
00055e 1724                          cp input_value, temp1   		 ; check if input floor already exists
00055f f081                          breq jumping_to_end_insert    ; quit if it does
000560 f140                          brlo insert_start    ; if input floor lower than ith floor, insert
000561 1740                          cp temp1, current_floor   		 ; compare ith floor to current floor
000562 f130                          brlo insert_start    ; if ith < current, insert
000563 9611                          adiw X, 1   		 ; increment output array
000564 9473                          inc counter   			 ; increment counter
000565 cff5                          rjmp up_ascending_loop
                                 
                                 up_descending_loop:
000566 1676                          cp counter, r22   		 ; compare counter to len (check if end of list reached)
000567 f101                          breq end_search   	 
000568 914c                          ld temp1, X   		 ; load floor from output array
000569 1724                          cp input_value, temp1   		 ; check if input floor already exists
00056a f131                          breq end_insert_loop    ; quit if it does
00056b 1740                          cp temp1, current_floor   		 ; compare ith floor to current floor
00056c f020                          brlo down_search    ; if input floor < current floor and ith floor < current floor jmp to down search
00056d 9611                          adiw X, 1   		 ; increment output array
00056e 9473                          inc counter   			 ; increment counter
00056f cff6                          rjmp up_descending_loop
                                 
                                 jumping_to_end_insert:
000570 c020                      rjmp end_insert_loop
                                 
                                 down_search:
000571 1702                          cp current_floor, input_value   		 ; compare current floor < input floor
000572 f05c                          brlt down_ascending_loop
                                 down_descending_loop:
000573 1676                          cp counter, r22   		 ; compare counter to len (check if end of list reached)
000574 f099                          breq end_search   	 
000575 914c                          ld temp1, X   		 ; load floor from output array
000576 1742                          cp temp1, input_value   		 ; check if input floor already exists
000577 f0c9                          breq end_insert_loop    ; quit if it does
000578 f080                          brlo insert_start    ; if current floor < input floor insert here
000579 1704                          cp current_floor, temp1   		 ; compare current floor to ith floor
00057a f070                          brlo insert_start    
00057b 9611                          adiw X, 1   		 ; increment output array
00057c 9473                          inc counter   			 ; increment counter
00057d cff5                          rjmp down_descending_loop
                                 
                                 down_ascending_loop:
00057e 1676                          cp counter, r22   		 ; compare counter to len (check if end of list reached)
00057f f041                          breq end_search   	 
000580 914c                          ld temp1, X   		 ; load floor from output array
000581 1742                          cp temp1, input_value   		 ; check if input floor already exists
000582 f071                          breq end_insert_loop    ; quit if it does
000583 1704                          cp current_floor, temp1   		 ; compare ith floor to current floor
000584 f2a0                          brlo up_search   	 ; if ith floor > current and input floor > current floor, jmp to upsearch
000585 9611                          adiw X, 1   		 ; increment output array
000586 9473                          inc counter   			 ; increment counter
000587 cff6                          rjmp down_ascending_loop
                                 
                                 end_search:
000588 c000                          rjmp insert_start
                                 
                                 insert_start:    
000589 9563                          inc r22    ;len++   		 ;length of list is now longer
                                 /*	push arg1
                                 	mov arg1, input_value
                                 	rcall convert_to_ascii
                                 	pop arg1*/
                                 
                                 
                                 insert_loop:
00058a 1567                          cp r22, counter   			 ; comparison of index and list length to check if the end of the list has been reached
00058b f029                          breq end_insert_loop    
00058c 914c                          ld temp1, X
00058d 932d                      	st X+, input_value
00058e 2f24                          mov input_value, temp1
00058f 9473                          inc counter
000590 cff9                          rjmp insert_loop
                                 
                                 end_insert_loop:
                                 
                                 
000591 9360 0200                     sts Queue_len, r22   	 ;store new length back in memory
                                 
                                     ;epilogue
000593 91bf                          pop XH
000594 91af                          pop XL
000595 917f                      	pop arg2
000596 916f                      	pop arg1
000597 916f                          pop r22
000598 914f                          pop r20
000599 913f                      	pop r19
00059a 912f                          pop r18
00059b 911f                      	pop r17
00059c 910f                      	pop r16
00059d 907f                          pop counter
00059e 915f                          pop temp2
00059f bf5f                          out SREG, temp2
0005a0 915f                          pop temp2
0005a1 9508                          ret
                                 
                                 
                                 //SHOW_FLOOR:
                                 show_floor:
                                 ;prologue
                                 ;    push YL
                                 ;    push YH
                                 
0005a2 930f                          push current_floor
0005a3 927f                          push counter
0005a4 93af                      	push XL
0005a5 93bf                      	push XH
                                 
0005a6 2477                          clr counter    
0005a7 27aa                          clr XL    ; output
0005a8 27bb                          clr XH
                                 loop:
0005a9 1670                          cp counter, current_floor
0005aa f041                          breq end_show_floor
0005ab 0faa                          lsl XL
0005ac 95a3                          inc XL
0005ad f008                          brcs grtr8
0005ae c002                          rjmp end_x
                                 grtr8:
0005af 0fbb                          lsl XH
0005b0 95b3                          inc XH
                                 end_x:    
0005b1 9473                          inc counter
0005b2 cff6                          rjmp loop
                                 
                                 
                                 ;epilogue
                                 end_show_floor:
0005b3 bbb4                          out PORTG, XH
0005b4 b9a8                          out PORTC, XL
                                 
0005b5 91bf                      pop XH
0005b6 91af                      pop XL
0005b7 907f                      pop counter
0005b8 910f                      pop current_floor
                                 
0005b9 9508                      ret
                                 
                                 
                                 
                                 //CONVERT_TO_ASCII
                                 convert_to_ascii:
                                 	;prologueg
0005ba 927f                      	push r7
0005bb 928f                      	push r8
0005bc 929f                      	push r9
0005bd 930f                      	push r16
0005be 931f                      	push r17
0005bf 932f                      	push r18
0005c0 933f                      	push r19
0005c1 934f                      	push r20
0005c2 936f                      	push arg1
0005c3 937f                      	push arg2
0005c4 938f                      	push r24
0005c5 939f                      	push r25
0005c6 93ef                      	push ZL
0005c7 93ff                      	push ZH
                                 
                                 
                                 
0005c8 2777                      	clr arg2 ///THIS IS ONLY FOR WHEN NUMBERS LESS THAN 255
                                 
                                 	;change_line 2, 14
                                 start:
0005c9 e6e0                      	ldi ZL, low(divisors<<1)
0005ca e0f0                      	ldi ZH, high(divisors<<1)
0005cb e340                      	ldi r20, 0x30		// ascii value for zero
0005cc 2488                      	clr r8
0005cd 2499                      	clr r9
                                 convert_loop:
0005ce e052                      	ldi temp2, 2
0005cf 1695                      	cp r9, temp2
0005d0 f119                      	breq end_convert
0005d1 c000                      	rjmp divide
                                 
                                 	// r19:r18 hold the dividend (numerator)
                                 divide:
0005d2 9105                          lpm r16, Z+  //divisor (denominator)
0005d3 9115                      	lpm r17, Z+ //^^^
0005d4 e080                      	ldi r24, 0  //quotient
0005d5 e090                      	ldi r25, 0	//^^^
                                 loop_start:
0005d6 3000                      	cpi r16, 0  // not dividing by zero
0005d7 f041                      	breq end_divide
0005d8 1760                      	cp arg1, r16 //check dividend !< divisor i.e. you can still minus
0005d9 0771                      	cpc arg2, r17
0005da f020                      	brlo end_loop 
0005db 1b60                      	sub arg1, r16  //dividend = dividend - divisor 
0005dc 0b71                      	sbc arg2, r17
0005dd 9601                      	adiw r25:r24, 1 //quotient++	
0005de cff7                          rjmp loop_start
                                 end_loop:
0005df 019b                      	movw r19:r18, arg2:arg1
                                 end_divide:
                                 	
                                 	//r23:r22 holds the remainder, r25:r24 holds the quotient
                                 
0005e0 01b9                      	movw arg2:arg1, r19:r18 //the remainder moves to the dividend to be divided again
0005e1 9493                      	inc r9
0005e2 3080                      	cpi r24, 0
                                 	//breq check_zero
0005e3 2e74                      	mov r7, r20	//r7 holds ASCII val for '0'
0005e4 0e78                      	add r7, r24 //r7 holds ASCII val for '0' + remainder
                                 
                                 	//st X+, r7 //store ASCII val in next part of data memory
                                 
0005e5 934f
0005e6 2d47
0005e7 df13
0005e8 df1b
0005e9 914f                      	write_reg r7
0005ea 9483                      	inc r8
0005eb cfe2                      	rjmp convert_loop
                                 check_zero:
0005ec 1483                      	cp r8, zero
0005ed f301                      	breq convert_loop
0005ee 934f
0005ef e340
0005f0 df0a
0005f1 df12
0005f2 914f                      	write '0'
                                 
0005f3 cfda                      	rjmp convert_loop
                                 
                                 
                                 
                                 end_convert:
                                 ;epilogue
0005f4 91ff                      	pop ZH
0005f5 91ef                      	pop ZL
0005f6 919f                      	pop r25
0005f7 918f                      	pop r24
0005f8 917f                      	pop arg2
0005f9 916f                      	pop arg1
0005fa 914f                      	pop r20
0005fb 913f                      	pop r19
0005fc 912f                      	pop r18
0005fd 911f                      	pop r17
0005fe 910f                      	pop r16
0005ff 909f                      	pop r9
000600 908f                      	pop r8
000601 907f                      	pop r7
000602 9508                      	ret
                                 
                                 
                                 
                                 //FLASH_LED
                                 /*//inputs current_floor(global), lift_status(global)
                                 
                                 flash_LED:
                                 push temp1
                                 push temp2
                                 lds temp1, Flash_wait   	 //value of second counter when flash is next toggled
                                 lds temp2, Flash_wait+1
                                 
                                 
                                 check_register_bit flashing
                                 breq flashTrue
                                 rjmp flashFalse    
                                 
                                 flashTrue:
                                     rcall show_floor
                                     clear_register_bit flashing
                                     rjmp end_flash_LED
                                 flashFalse:
                                     push current_floor
                                     dec current_floor
                                     rcall show_floor
                                     pop current_floor
                                     set_register_bit flashing
                                 
                                 end_flash_LED:
                                 pop temp2
                                 pop temp1
                                 ret*/
                                 
                                 
                                 /*LED_flash:	//Reads in the seconds value in arg1
                                 	push temp1
                                 	in temp1, SREG
                                 	push temp1
                                 	push current_floor
                                     push arg1
                                 	ror arg1 //rotates the time into the carry
                                     brcs LED_up	//if old LSB was 1, i.e. odd turn strobe on
                                     brcc LED_down	//if old LSB was 0, i.e even turn strobe off
                                 
                                 LED_up:
                                     rcall show_floor		//set PORTA bit to 1
                                 	rjmp LED_end
                                 LED_down:
                                     dec current_floor
                                 	rcall show_floor
                                 	rjmp LED_end
                                 LED_end:
                                     pop arg1
                                 	pop current_floor
                                 	pop temp1
                                 	out SREG, temp1
                                 	pop temp1
                                 	ret*/
                                 
                                 LED_flash:
000603 934f                      	push temp1
000604 b74f                      	in temp1, SREG
000605 934f                      	push temp1
000606 930f                      	push current_floor
                                 	
000607 934f
000608 2d4d
000609 7240
00060a 3240
00060b 914f                      	check_register_bit flashing
00060c f009                      	breq LED_up
00060d c007                      	rjmp LED_down
                                 
                                 LED_up:
00060e df93                      	rcall show_floor
00060f 934f
000610 2d4d
000611 7d4f
000612 2ed4
000613 914f                      	clear_register_bit flashing
000614 c007                      	rjmp LED_END
                                 LED_down:
000615 950a                      	dec current_floor
000616 df8b                      	rcall show_floor
000617 934f
000618 2d4d
000619 6240
00061a 2ed4
00061b 914f                      	set_register_bit flashing
                                 
                                 LED_end:
00061c 910f                      	pop current_floor
00061d 914f                      	pop temp1
00061e bf4f                      	out SREG, temp1
00061f 914f                      	pop temp1
000620 9508                      	ret
                                 
                                 
                                 
                                 //STROBE_FLASH
                                 Strobe_flash:	//Reads in the seconds value in X
000621 934f                      	push temp1
000622 b74f                      	in temp1, SREG
000623 934f                      	push temp1
000624 1454                      	cp flip_flash, one
000625 f009                      	breq strobe_on	
000626 c003                      	rjmp strobe_off
                                 
                                 strobe_on:
000627 9a11                          lcd_set 1		//set PORTA bit to 1
000628 945a                      	dec flip_flash
000629 c003                      	rjmp strobe_end
                                 strobe_off:
00062a 9811                          lcd_clr 1
00062b 9453                      	inc flip_flash
00062c c000                      	rjmp strobe_end
                                 Strobe_end:
00062d 916f                          pop arg1
00062e 914f                      	pop temp1
00062f bf4f                      	out SREG, temp1
000630 914f                      	pop temp1
000631 9508                      	ret
                                 	
                                 //SCAN				//return value in arg1
                                 scan:
000632 930f                          push r16 // row
000633 931f                          push r17 // col
000634 932f                          push r18 // rmask // r18 will be used to return the input_value
000635 933f                          push r19 // cmask
000636 934f                          push temp1
000637 935f                          push temp2 
000638 936f                          push arg1 // floor
000639 937f                          push arg2 // floor2
00063a ee3f                          ldi r19, INITCOLMASK   	 ; load column mask to scan a column
00063b 2711                          clr r17
                                 
                                 
00063c 24aa                      	clr ret1
                                 colloop:
00063d 3014                          cpi r17, 4   				 ; check if all columns scanned
00063e f169                          breq scan_end   		 ; restart scan if all cols scanned
00063f 9330 010b                     sts PORTL, r19   		 ; scan a column (sts used instead of out since PORTL is in extended I/O space)
000641 ef4f                          ldi temp1, 0xFF   			 ; slow down scan operation (???? WHY ????)
                                 
                                 delay:
000642 954a                          dec temp1
000643 f7f1                          brne delay
                                 
000644 9160 0109                     lds arg1, PINL   		;load current status of PORTL pins(lds must be used instead of in)
000646 706f                          andi arg1, ROWMASK   		 ; and the PINL register with row mask
000647 306f                          cpi arg1, 0xF   			 ; check if any row low
000648 f059                          breq nextcol   			 ; if temp is all 1s (i.e 0xF), then there are now lows
                                    							 ; if there is a low, find which row it is
000649 e021                          ldi r18, INITROWMASK   	 ; load Row mask
00064a 2700                          clr r16
                                 
                                 rowloop:
00064b 3004                          cpi r16, 4   			; if all rows scanned, jump to next column
00064c f039                          breq nextcol
00064d 2f56                          mov temp2, arg1  			 
00064e 2352                          and temp2, r18   		 ; mask the input with row mask
00064f f041                          breq show   				; if the bit is clear, a key has been pressed
                                    							 ; eg if a key in row 1 is pressed, temp2 = XXXX1101
                                    							 ; rmask should equal 00000010
                                    							 ; when AND is used, result is 00000000 -> button pressed
000650 9503                          inc r16   				 ; move to next row
000651 0f22                          lsl r18   				 ; left shift mask to check next row
000652 940c 064b                     jmp rowloop
                                 
                                 nextcol:   					 ; jump to next column when row scan over
000654 0f33                          lsl r19   				 ; left shift mask to check next col
000655 9513                          inc r17
000656 940c 063d                     jmp colloop
                                 
                                 show:
                                 	
000658 3013                          cpi r17, 3   			; if column = 3, a key in column 3 is pressed, which is a 									letter key
000659 f091                          breq scan_end   				 ; we dont need to deal with this for this lab, so go to n_a
                                 
00065a 3003                          cpi r16, 3   				 ; if row = 3, a key in row 3 has been pressed, which is any 								special character or 0
00065b f039                          breq check_bottom_row				 ; zero is the only key we are worried about, so go to check_zero
                                 	
00065c 2f60                      	mov arg1, r16				; move row to floor
00065d 0f66                      	lsl arg1					; multiply by 2
00065e 0f60                      	add arg1, r16				; add row again, to multiply row by 3
00065f 0f61                      	add arg1, r17				; add col
000660 5f6f                      	subi arg1, -1				; add 1
000661 940c 066b                 	jmp end_show
                                 
                                 check_bottom_row:
000663 3010                      	cpi r17, 0
000664 f029                      	breq asterisk
                                 
000665 3011                      	cpi r17, 1
000666 e06a                      	ldi arg1, 10
000667 f019                      	breq end_show
                                 
000668 940c 066c                 	jmp scan_end
                                 
                                 asterisk:
00066a e26a                      	ldi arg1, '*'
                                 
                                 	
                                 end_show:
                                 
00066b 2ea6                      	mov ret1, arg1
                                 
                                 
                                 scan_end:
                                 /*	ldi temp1, 3		//ONLY FOR DEBUGGING
                                 	mov ret1, temp1*/
                                 /*	cpse ret1, zero
                                 	out PORTG, one*/
00066c 917f                      	pop arg2
00066d 916f                      	pop arg1
00066e 915f                      	pop temp2
00066f 914f                      	pop temp1
000670 913f                      	pop r19
000671 912f                      	pop r18
000672 911f                      	pop r17
000673 910f                      	pop r16
                                 
000674 9508                      	ret
                                 																		
                                 //FUNCTION shuffle_queue
                                 
                                 shuffle_queue:
000675 93ef                      	push ZL
000676 93ff                      	push ZH
000677 934f                      	push temp1
000678 935f                      	push temp2
000679 936f                      	push arg1
00067a 937f                      	push arg2
00067b 927f                      	push counter
                                 	
00067c e0e1                      	ldi ZL, low(Queue)
00067d e0f2                      	ldi ZH, high(Queue)
                                 
00067e 9140 0200                 	lds temp1, Queue_len
000680 0fe4                      	add ZL, temp1
000681 1df3                      	adc ZH, zero
                                 
000682 9731                      	sbiw Z, 1
000683 2477                      	clr counter
000684 2766                      	clr arg1
                                 shuffle_loop:
                                 	//Z points to the end of the queue
000685 9140 0200                 	lds temp1, Queue_len
000687 1674                      	cp counter, temp1
000688 f031                      	breq shuffle_loop_end
000689 8170                      	ld arg2, Z
00068a 8360                      	st Z, arg1
00068b 2f67                      	mov arg1, arg2
00068c 9473                      	inc counter
00068d 9731                      	sbiw Z, 1
00068e cff6                      	rjmp shuffle_loop
                                 shuffle_loop_end:
00068f 9140 0200                 	lds temp1, Queue_len
000691 954a                      	dec temp1
000692 9340 0200                 	sts Queue_len, temp1
                                 
                                 
000694 907f                      	pop counter
000695 917f                      	pop arg2
000696 916f                      	pop arg1
000697 915f                      	pop temp2
000698 914f                      	pop temp1
000699 91ff                      	pop ZH	
00069a 91ef                       	pop ZL
                                 
00069b 9508                      	ret
                                 
                                 
                                 
                                 
                                 	
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :  10 y  :   0 z  :   6 r0 :   0 r1 :   0 r2 :   0 r3 :  36 r4 :   4 
r5 :   4 r6 :   0 r7 :  28 r8 :   5 r9 :   5 r10:  10 r11:   6 r12:   8 
r13:  81 r14:   4 r15:   0 r16:  52 r17:  20 r18:  25 r19:  11 r20: 702 
r21:  79 r22:  46 r23:  15 r24:  40 r25:  28 r26:  11 r27:  11 r28:   0 
r29:   0 r30:   7 r31:   7 
Registers used: 27 out of 35 (77.1%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   4 adiw  :   7 and   :   1 
andi  :  18 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :  49 brge  :  10 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 brlt  :   7 brmi  :   0 
brne  :  14 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   9 cbr   :  21 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  31 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  32 cpc   :   2 
cpi   :  49 cpse  :   2 dec   :   6 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :  20 jmp   :  24 ld    :   6 ldd   :   0 ldi   : 151 
lds   :  35 lpm   :   2 lsl   :   5 lsr   :   3 mov   : 114 movw  :   2 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 or    :   0 
ori   :  19 out   :  28 pop   : 210 push  : 209 rcall : 240 ret   :  13 
reti  :   5 rjmp  :  53 rol   :   0 ror   :   0 sbc   :   1 sbci  :   0 
sbi   :   7 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :  11 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :  69 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 50 out of 116 (43.1%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d38   3304      4   3308  262144   1.3%
[.dseg] 0x000200 0x000211      0     17     17    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
